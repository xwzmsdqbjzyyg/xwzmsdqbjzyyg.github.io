<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一天进步一点</title>
  <subtitle>一天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xwzmsdqbjzyyg.github.io/"/>
  <updated>2016-06-12T04:00:25.996Z</updated>
  <id>http://xwzmsdqbjzyyg.github.io/</id>
  
  <author>
    <name>陈长生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL性能优化的最佳20+条经验</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/06/12/mysql-01/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/06/12/mysql-01/</id>
    <published>2016-06-12T03:04:32.000Z</published>
    <updated>2016-06-12T04:00:25.996Z</updated>
    
    <content type="html">&lt;p&gt;今天，数据库的操作越来越成为整个应用的性能瓶颈了，这点对于Web应用尤其明显。关于数据库的性能，这并不只是DBA才需要担心的事，而这更是我们程序员需要去关注的事情。当我们去设计数据库表结构，对操作数据库时（尤其是查表时的SQL语句），我们都需要注意数据操作的性能。这里，我们不会讲过多的SQL语句的优化，而只是针对MySQL这一Web应用最多的数据库。希望下面的这些优化技巧对你有用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为查询缓存优化你的查询&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。&lt;/p&gt;
&lt;p&gt;这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mysqlc1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面两条SQL语句的差别就是 CURDATE() ，MySQL的查询缓存对这个函数不起作用。所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;EXPLAIN 你的 SELECT 查询&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 EXPLAIN 关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。&lt;/p&gt;
&lt;p&gt;EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的……等等，等等。&lt;/p&gt;
&lt;p&gt;挑一个你的SELECT语句（推荐挑选那个最复杂的，有多表联接的），把关键字EXPLAIN加到前面。你可以使用phpmyadmin来做这个事。然后，你会看到一张表格。下面的这个示例中，我们忘记加上了group_id索引，并且有表联接：&lt;br&gt;&lt;img src=&quot;/images/mysqlc2.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/mysqlc3.jpg&quot;&gt;&lt;br&gt;当我们为 group_id 字段加上索引后：&lt;br&gt;&lt;img src=&quot;/images/mysqlc4.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/mysqlc5.jpg&quot;&gt;&lt;br&gt;我们可以看到，前一个结果显示搜索了 7883 行，而后一个只是搜索了两个表的 9 和 16 行。查看rows列可以让我们找到潜在的性能问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当只要一行数据时使用 LIMIT 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。&lt;/p&gt;
&lt;p&gt;在这种情况下，加上 LIMIT 1 可以增加性能。这样一样，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。&lt;/p&gt;
&lt;p&gt;下面的示例，只是为了找一下是否有“中国”的用户，很明显，后面的会比前面的更有效率。（请注意，第一条中是Select *，第二条是Select 1）&lt;br&gt;&lt;img src=&quot;/images/mysqlc6.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为搜索字段建索引&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;索引并不一定就是给主键或是唯一的字段。如果在你的表中，有某个字段你总要会经常用来做搜索，那么，请为其建立索引吧。&lt;br&gt;&lt;img src=&quot;/images/mysqlc7.jpg&quot;&gt;&lt;br&gt;从上图你可以看到那个搜索字串 “last_name LIKE ‘a%’”，一个是建了索引，一个是没有索引，性能差了4倍左右。&lt;/p&gt;
&lt;p&gt;另外，你应该也需要知道什么样的搜索是不能使用正常的索引的。例如，当你需要在一篇大的文章中搜索一个词时，如： “WHERE post_content LIKE ‘%apple%’”，索引可能是没有意义的。你可能需要使用MySQL全文索引 或是自己做一个索引（比如说：搜索关键词或是Tag什么的）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Join表的时候使用相当类型的例，并将其索引&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。&lt;/p&gt;
&lt;p&gt;而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）&lt;br&gt;&lt;img src=&quot;/images/mysqlc8.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;千万不要 ORDER BY RAND()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想打乱返回的数据行？随机挑一个数据？真不知道谁发明了这种用法，但很多新手很喜欢这样用。但你确不了解这样做有多么可怕的性能问题。&lt;/p&gt;
&lt;p&gt;如果你真的想把返回的数据行打乱了，你有N种方法可以达到这个目的。这样使用只让你的数据库的性能呈指数级的下降。这里的问题是：MySQL会不得不去执行RAND()函数（很耗CPU时间），而且这是为了每一行记录去记行，然后再对其排序。就算是你用了Limit 1也无济于事（因为要排序）&lt;/p&gt;
&lt;p&gt;下面的示例是随机挑一条记录&lt;br&gt;&lt;img src=&quot;/images/mysqlc9.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免 SELECT *&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。&lt;/p&gt;
&lt;p&gt;所以，你应该养成一个需要什么就取什么的好的习惯。&lt;br&gt;&lt;img src=&quot;/images/mysqlc10.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;永远为每张表设置一个ID&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们应该为数据库里的每张表都设置一个ID做为其主键，而且最好的是一个INT型的（推荐使用UNSIGNED），并设置上自动增加的AUTO_INCREMENT标志。&lt;/p&gt;
&lt;p&gt;就算是你 users 表有一个主键叫 “email”的字段，你也别让它成为主键。使用 VARCHAR 类型来当主键会使用得性能下降。另外，在你的程序中，你应该使用表的ID来构造你的数据结构。&lt;/p&gt;
&lt;p&gt;而且，在MySQL数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区……&lt;/p&gt;
&lt;p&gt;在这里，只有一个情况是例外，那就是“关联表”的“外键”，也就是说，这个表的主键，通过若干个别的表的主键构成。我们把这个情况叫做“外键”。比如：有一个“学生表”有学生的ID，有一个“课程表”有课程ID，那么，“成绩表”就是“关联表”了，其关联了学生表和课程表，在成绩表中，学生ID和课程ID叫“外键”其共同组成主键。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 ENUM 而不是 VARCHAR&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。&lt;/p&gt;
&lt;p&gt;如果你有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，你知道这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是 VARCHAR。&lt;/p&gt;
&lt;p&gt;MySQL也有一个“建议”（见第十条）告诉你怎么去重新组织你的表结构。当你有一个 VARCHAR 字段时，这个建议会告诉你把其改成 ENUM 类型。使用 PROCEDURE ANALYSE() 你可以得到相关的建议。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 PROCEDURE ANALYSE() 取得建议&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PROCEDURE ANALYSE() 会让 MySQL 帮你去分析你的字段和其实际的数据，并会给你一些有用的建议。只有表中有实际的数据，这些建议才会变得有用，因为要做一些大的决定是需要有数据作为基础的。&lt;/p&gt;
&lt;p&gt;例如，如果你创建了一个 INT 字段作为你的主键，然而并没有太多的数据，那么，PROCEDURE ANALYSE()会建议你把这个字段的类型改成 MEDIUMINT 。或是你使用了一个 VARCHAR 字段，因为数据不多，你可能会得到一个让你把它改成 ENUM 的建议。这些建议，都是可能因为数据不够多，所以决策做得就不够准。&lt;/p&gt;
&lt;p&gt;在phpmyadmin里，你可以在查看表时，点击 “Propose table structure” 来查看这些建议&lt;br&gt;&lt;img src=&quot;/images/mysqlc11.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽可能的使用 NOT NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。这看起来好像有点争议，请往下看。&lt;/p&gt;
&lt;p&gt;首先，问问你自己“Empty”和“NULL”有多大的区别（如果是INT，那就是0和NULL）？如果你觉得它们之间没有什么区别，那么你就不要使用NULL。（你知道吗？在 Oracle 里，NULL 和 Empty 的字符串是一样的！)&lt;/p&gt;
&lt;p&gt;不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。 当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。&lt;/p&gt;
&lt;p&gt;下面摘自MySQL自己的文档：&lt;br&gt;&lt;img src=&quot;/images/mysqlc12.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepared Statements&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prepared Statements很像存储过程，是一种运行在后台的SQL语句集合，我们可以从使用 prepared statements 获得很多好处，无论是性能问题还是安全问题。&lt;/p&gt;
&lt;p&gt;Prepared Statements 可以检查一些你绑定好的变量，这样可以保护你的程序不会受到“SQL注入式”攻击。当然，你也可以手动地检查你的这些变量，然而，手动的检查容易出问题，而且很经常会被程序员忘了。当我们使用一些framework或是ORM的时候，这样的问题会好一些。&lt;/p&gt;
&lt;p&gt;在性能方面，当一个相同的查询被使用多次的时候，这会为你带来可观的性能优势。你可以给这些Prepared Statements定义一些参数，而MySQL只会解析一次。&lt;/p&gt;
&lt;p&gt;虽然最新版本的MySQL在传输Prepared Statements是使用二进制形势，所以这会使得网络传输非常有效率。&lt;/p&gt;
&lt;p&gt;当然，也有一些情况下，我们需要避免使用Prepared Statements，因为其不支持查询缓存。但据说版本5.1后支持了。&lt;/p&gt;
&lt;p&gt;在PHP中要使用prepared statements，你可以查看其使用手册：mysqli 扩展 或是使用数据库抽象层，如： PDO.&lt;br&gt;&lt;img src=&quot;/images/mysqlc13.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无缓冲的查询&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正常的情况下，当你在当你在你的脚本中执行一个SQL语句的时候，你的程序会停在那里直到没这个SQL语句返回，然后你的程序再往下继续执行。你可以使用无缓冲查询来改变这个行为。&lt;/p&gt;
&lt;p&gt;关于这个事情，在PHP的文档中有一个非常不错的说明： mysql_unbuffered_query() 函数：&lt;br&gt;&lt;img src=&quot;/images/mysqlc14.jpg&quot;&gt;&lt;br&gt;上面那句话翻译过来是说，mysql_unbuffered_query() 发送一个SQL语句到MySQL而并不像mysql_query()一样去自动fethch和缓存结果。这会相当节约很多可观的内存，尤其是那些会产生大量结果的查询语句，并且，你不需要等到所有的结果都返回，只需要第一行数据返回的时候，你就可以开始马上开始工作于查询结果了。&lt;/p&gt;
&lt;p&gt;然而，这会有一些限制。因为你要么把所有行都读走，或是你要在进行下一次的查询前调用 mysql_free_result() 清除结果。而且， mysql_num_rows() 或 mysql_data_seek() 将无法使用。所以，是否使用无缓冲的查询你需要仔细考虑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把IP地址存成 UNSIGNED INT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多程序员都会创建一个 VARCHAR(15) 字段来存放字符串形式的IP而不是整形的IP。如果你用整形来存放，只需要4个字节，并且你可以有定长的字段。而且，这会为你带来查询上的优势，尤其是当你需要使用这样的WHERE条件：IP between ip1 and ip2。&lt;/p&gt;
&lt;p&gt;我们必需要使用UNSIGNED INT，因为 IP地址会使用整个32位的无符号整形。&lt;/p&gt;
&lt;p&gt;而你的查询，你可以使用 INET_ATON() 来把一个字符串IP转成一个整形，并使用 INET_NTOA() 把一个整形转成一个字符串IP。在PHP中，也有这样的函数 ip2long() 和 long2ip()。&lt;br&gt;&lt;img src=&quot;/images/mysqlc15.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;固定长度的表会更快&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。&lt;/p&gt;
&lt;p&gt;固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。&lt;/p&gt;
&lt;p&gt;并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。&lt;/p&gt;
&lt;p&gt;使用“垂直分割”技术（见下一条），你可以分割你的表成为两个一个是定长的，一个则是不定长的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;垂直分割&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）&lt;/p&gt;
&lt;p&gt;示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。&lt;/p&gt;
&lt;p&gt;示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。&lt;/p&gt;
&lt;p&gt;另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。&lt;/p&gt;
&lt;p&gt;会比不分割时还要差，而且，会是极数级的下降。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拆分大的 DELETE 或 INSERT 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。&lt;/p&gt;
&lt;p&gt;Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。&lt;/p&gt;
&lt;p&gt;如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了。&lt;/p&gt;
&lt;p&gt;所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。下面是一个示例：&lt;br&gt;&lt;img src=&quot;/images/mysqlc16.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;越小的列会越快&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。&lt;/p&gt;
&lt;p&gt;参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。&lt;/p&gt;
&lt;p&gt;如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。&lt;/p&gt;
&lt;p&gt;当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看Slashdot的例子（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择正确的存储引擎&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 MySQL 中有两个存储引擎 MyISAM 和 InnoDB，每个引擎都有利有弊。酷壳以前文章《MySQL: InnoDB 还是 MyISAM?》讨论和这个事情。&lt;/p&gt;
&lt;p&gt;MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。&lt;/p&gt;
&lt;p&gt;InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。&lt;/p&gt;
&lt;p&gt;下面是MySQL的手册&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;target=”_blank”MyISAM Storage Engine
InnoDB Storage Engine
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;使用一个对象关系映射器（Object Relational Mapper）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 ORM (Object Relational Mapper)，你能够获得可靠的性能增涨。一个ORM可以做的所有事情，也能被手动的编写出来。但是，这需要一个高级专家。&lt;/p&gt;
&lt;p&gt;ORM 的最重要的是“Lazy Loading”，也就是说，只有在需要的去取值的时候才会去真正的去做。但你也需要小心这种机制的副作用，因为这很有可能会因为要去创建很多很多小的查询反而会降低性能。&lt;/p&gt;
&lt;p&gt;ORM 还可以把你的SQL语句打包成一个事务，这会比单独执行他们快得多得多。&lt;/p&gt;
&lt;p&gt;目前，个人最喜欢的PHP的ORM是：Doctrine。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;小心“永久链接”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“永久链接”的目的是用来减少重新创建MySQL链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。而且，自从我们的Apache开始重用它的子进程后——也就是说，下一次的HTTP请求会重用Apache的子进程，并重用相同的 MySQL 链接。&lt;/p&gt;
&lt;p&gt;PHP手册：mysql_pconnect()&lt;/p&gt;
&lt;p&gt;在理论上来说，这听起来非常的不错。但是从个人经验（也是大多数人的）上来说，这个功能制造出来的麻烦事更多。因为，你只有有限的链接数，内存问题，文件句柄数，等等。&lt;/p&gt;
&lt;p&gt;而且，Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种“永久链接”的机制工作地不好的原因。在你决定要使用“永久链接”之前，你需要好好地考虑一下你的整个系统的架构。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天，数据库的操作越来越成为整个应用的性能瓶颈了，这点对于Web应用尤其明显。关于数据库的性能，这并不只是DBA才需要担心的事，而这更是我们程序员需要去关注的事情。当我们去设计数据库表结构，对操作数据库时（尤其是查表时的SQL语句），我们都需要注意数据操作的性能。这里，我们
    
    </summary>
    
    
      <category term="mysql" scheme="http://xwzmsdqbjzyyg.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>cookie 与 session</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/06/08/cookie-01/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/06/08/cookie-01/</id>
    <published>2016-06-08T09:20:26.000Z</published>
    <updated>2016-06-08T09:41:29.791Z</updated>
    
    <content type="html">&lt;p&gt;cookie简介&lt;/p&gt;
&lt;p&gt;Cookie是存储在客户端浏览器中的数据，我们通过Cookie来跟踪与存储用户数据。一般情况下，Cookie通过HTTP headers从服务端返回到客户端。多数web程序都支持Cookie的操作，因为Cookie是存在于HTTP的标头之中，所以必须在其他信息输出以前进行设置，类似于header函数的使用限制。&lt;/p&gt;
&lt;p&gt;PHP通过setcookie函数进行Cookie的设置，任何从浏览器发回的Cookie，PHP都会自动的将他存储在$_COOKIE的全局变量之中，因此我们可以通过$_COOKIE[‘key’]的形式来读取某个Cookie值。&lt;/p&gt;
&lt;p&gt;PHP中的Cookie具有非常广泛的使用，经常用来存储用户的登录信息，购物车等，且在使用会话Session时通常使用Cookie来存储会话id来识别用户，Cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除。同时为了进行安全控制，Cookie还可以设置域跟路径，我们会在稍后的章节中详细的讲解他们。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
setcookie(&amp;apos;test&amp;apos;, time());
ob_start();//打开输出控制缓冲
print_r($_COOKIE);
$content = ob_get_contents();//复制缓冲区内容到$content中
$content = str_replace(&amp;quot; &amp;quot;, &amp;apos;&amp;amp;nbsp;&amp;apos;, $content);
ob_clean();//清空（擦掉）输出缓冲区
header(&amp;quot;content-type:text/html; charset=utf-8&amp;quot;);
echo &amp;apos;当前的Cookie为：&amp;lt;br/&amp;gt;&amp;apos;;
echo nl2br($content);//nl2br 在字符串所有新行之前插入 HTML 换行标记
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置cookie&lt;/p&gt;
&lt;p&gt;PHP设置Cookie最常用的方法就是使用setcookie函数，setcookie具有7个可选参数，我们常用到的为前5个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name（ Cookie名）可以通过$_COOKIE[&amp;apos;name&amp;apos;] 进行访问
value（Cookie的值）
expire（过期时间）Unix时间戳格式，默认为0，表示浏览器关闭即失效
path（有效路径）如果路径设置为&amp;apos;/&amp;apos;，则整个网站都有效
domain（有效域）默认整个域名都有效，如果设置了&amp;apos;www.icy.com&amp;apos;,则只在www子域中有效

$value = &amp;apos;test&amp;apos;;
setcookie(&amp;quot;TestCookie&amp;quot;, $value);
setcookie(&amp;quot;TestCookie&amp;quot;, $value, time()+3600);  //有效期一小时
setcookie(&amp;quot;TestCookie&amp;quot;, $value, time()+3600, &amp;quot;/path/&amp;quot;, &amp;quot;icy.com&amp;quot;); //设置路径与域
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PHP中还有一个设置Cookie的函数setrawcookie，setrawcookie跟setcookie基本一样，唯一的不同就是value值不会自动的进行urlencode，因此在需要的时候要手动的进行urlencode。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setrawcookie(&amp;apos;cookie_name&amp;apos;, rawurlencode($value), time()+60*60*24*365); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为Cookie是通过HTTP标头进行设置的，所以也可以直接使用header方法进行设置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;header(&amp;quot;Set-Cookie:cookie_name=value&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cookie的删除与过期时间&lt;/p&gt;
&lt;p&gt;们却发现php中没有删除Cookie的函数，在PHP中删除cookie也是采用setcookie函数来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setcookie(&amp;apos;test&amp;apos;, &amp;apos;&amp;apos;, time()-1); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到将cookie的过期时间设置到当前时间之前，则该cookie会自动失效，也就达到了删除cookie的目的。之所以这么设计是因为cookie是通过HTTP的标头来传递的，客户端根据服务端返回的Set-Cookie段来进行cookie的设置，如果删除cookie需要使用新的Del-Cookie来实现，则HTTP头就会变得复杂，实际上仅通过Set-Cookie就可以简单明了的实现Cookie的设置、更新与删除。&lt;/p&gt;
&lt;p&gt;了解原理以后，我们也可以直接通过header来删除cookie。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;header(&amp;quot;Set-Cookie:test=1393832059; expires=&amp;quot;.gmdate(&amp;apos;D, d M Y H:i:s \G\M\T&amp;apos;, time()-1));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里用到了gmdate，用来生成格林威治标准时间，以便排除时差的影响。&lt;br&gt;cookie的有效路径&lt;/p&gt;
&lt;p&gt;ookie中的路径用来控制设置的cookie在哪个路径下有效，默认为’/’，在所有路径下都有，当设定了其他路径之后，则只在设定的路径以及子路径下有效，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setcookie(‘test’, time(), 0, ‘/path’);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的设置会使test在/path以及子路径/path/abc下都有效，但是在根目录下就读取不到test的cookie值。&lt;/p&gt;
&lt;p&gt;一般情况下，大多是使用所有路径的，只有在极少数有特殊需求的时候，会设置路径，这种情况下只在指定的路径中才会传递cookie值，可以节省数据的传输，增强安全性以及提高性能。&lt;br&gt;当我们设置了有效路径的时候，不在当前路径的时候则看不到当前cookie。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setcookie(&amp;apos;test&amp;apos;, &amp;apos;1&amp;apos;,0, &amp;apos;/path&amp;apos;);  
var_dump($_COOKIE[&amp;apos;test&amp;apos;]);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;session与cookie的异同&lt;/p&gt;
&lt;p&gt;cookie将数据存储在客户端，建立起用户与服务器之间的联系，通常可以解决很多问题，但是cookie仍然具有一些局限：&lt;/p&gt;
&lt;p&gt;cookie相对不是太安全，容易被盗用导致cookie欺骗&lt;br&gt;单个cookie的值最大只能存储4k&lt;br&gt;每次请求都要进行网络传输，占用带宽&lt;/p&gt;
&lt;p&gt;session是将用户的会话数据存储在服务端，没有大小限制，通过一个session_id进行用户识别，PHP默认情况下session id是通过cookie来保存的，因此从某种程度上来说，seesion依赖于cookie。但这不是绝对的，session id也可以通过参数来实现，只要能将session id传递到服务端进行识别的机制都可以使用session。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//开始使用session
session_start();
//设置一个session
$_SESSION[&amp;apos;test&amp;apos;] = time();
//显示当前的session_id
echo &amp;quot;session_id:&amp;quot;.session_id();
echo &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;

//读取session值
echo $_SESSION[&amp;apos;test&amp;apos;];

//销毁一个session
unset($_SESSION[&amp;apos;test&amp;apos;]);
echo &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
var_dump($_SESSION);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用session&lt;/p&gt;
&lt;p&gt;在PHP中使用session非常简单，先执行session_start方法开启session，然后通过全局变量$_SESSION进行session的读写。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;session_start();
$_SESSION[&amp;apos;test&amp;apos;] = time();
var_dump($_SESSION);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;session会自动的对要设置的值进行encode与decode，因此session可以支持任意数据类型，包括数据与对象等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;session_start();
$_SESSION[&amp;apos;ary&amp;apos;] = array(&amp;apos;name&amp;apos; =&amp;gt; &amp;apos;jobs&amp;apos;);
$_SESSION[&amp;apos;obj&amp;apos;] = new stdClass();
var_dump($_SESSION);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认情况下，session是以文件形式存储在服务器上的，因此当一个页面开启了session之后，会独占这个session文件，这样会导致当前用户的其他并发访问无法执行而等待。可以采用缓存或者数据库的形式存储来解决这个问题，这个我们会在一些高级的课程中讲到。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//在这里设置name的session值为jobs
session_start();
$_SESSION[&amp;apos;name&amp;apos;]=&amp;apos;xuehairong&amp;apos;;
$_SESSION[&amp;apos;obj&amp;apos;] = new stdClass();
var_dump($_SESSION);
echo $_SESSION[&amp;apos;name&amp;apos;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array(2) {
  [&amp;quot;name&amp;quot;]=&amp;gt;
  string(10) &amp;quot;xuehairong&amp;quot;
  [&amp;quot;obj&amp;quot;]=&amp;gt;
  object(stdClass)#1 (0) {
  }
}
xuehairong
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除与销毁session&lt;/p&gt;
&lt;p&gt;删除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。&lt;/p&gt;
&lt;p&gt;如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;session_start();
$_SESSION[&amp;apos;name&amp;apos;] = &amp;apos;jobs&amp;apos;;
unset($_SESSION[&amp;apos;name&amp;apos;]);
echo $_SESSION[&amp;apos;name&amp;apos;]; //提示name不存在

session_start();
$_SESSION[&amp;apos;name&amp;apos;] = &amp;apos;jobs&amp;apos;;
$_SESSION[&amp;apos;time&amp;apos;] = time();
session_destroy();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，session_destroy并不会立即的销毁全局变量$_SESSION中的值，只有当下次再访问的时候，$_SESSION才为空，因此如果需要立即销毁$_SESSION，可以使用unset函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;session_start();
$_SESSION[&amp;apos;name&amp;apos;] = &amp;apos;jobs&amp;apos;;
$_SESSION[&amp;apos;time&amp;apos;] = time();
unset($_SESSION);
session_destroy(); 
var_dump($_SESSION); //此时已为空
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果需要同时销毁cookie中的session_id，通常在用户退出的时候可能会用到，则还需要显式的调用setcookie方法删除session_id的cookie值。&lt;br&gt;使用session来存储用户的登录信息&lt;/p&gt;
&lt;p&gt;ession可以用来存储多种类型的数据，因此具有很多的用途，常用来存储用户的登录信息，购物车数据，或者一些临时使用的暂存数据等。&lt;/p&gt;
&lt;p&gt;用户在登录成功以后，通常可以将用户的信息存储在session中，一般的会单独的将一些重要的字段单独存储，然后所有的用户信息独立存储。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$_SESSION[&amp;apos;uid&amp;apos;] = $userinfo[&amp;apos;uid&amp;apos;];
$_SESSION[&amp;apos;userinfo&amp;apos;] = $userinfo;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般来说，登录信息既可以存储在sessioin中，也可以存储在cookie中，他们之间的差别在于session可以方便的存取多种数据类型，而cookie只支持字符串类型，同时对于一些安全性比较高的数据，cookie需要进行格式化与加密存储，而session存储在服务端则安全性较高。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
session_start();
//假设用户登录成功获得了以下用户数据
$userinfo = array(
    &amp;apos;uid&amp;apos;  =&amp;gt; 10000,
    &amp;apos;name&amp;apos; =&amp;gt; &amp;apos;spark&amp;apos;,
    &amp;apos;email&amp;apos; =&amp;gt; &amp;apos;spark@icy.com&amp;apos;,
    &amp;apos;sex&amp;apos;  =&amp;gt; &amp;apos;woman&amp;apos;,
    &amp;apos;age&amp;apos;  =&amp;gt; &amp;apos;18&amp;apos;
);
header(&amp;quot;content-type:text/html; charset=utf-8&amp;quot;);

/* 将用户信息保存到session中 */
$_SESSION[&amp;apos;uid&amp;apos;] = $userinfo[&amp;apos;uid&amp;apos;];
$_SESSION[&amp;apos;name&amp;apos;] = $userinfo[&amp;apos;name&amp;apos;];
$_SESSION[&amp;apos;userinfo&amp;apos;] = $userinfo;

//* 将用户数据保存到cookie中的一个简单方法 */
$secureKey = &amp;apos;icy&amp;apos;; //加密密钥
$str = serialize($userinfo); //将用户信息序列化
//用户信息加密前
$str = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($secureKey), $str, MCRYPT_MODE_ECB));
//用户信息加密后
//将加密后的用户数据存储到cookie中
setcookie(&amp;apos;userinfo&amp;apos;, $str);

//当需要使用时进行解密
$str = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($secureKey), base64_decode($str), MCRYPT_MODE_ECB);
$uinfo = unserialize($str);
echo &amp;quot;解密后的用户信息：&amp;lt;br&amp;gt;&amp;quot;;
print_r($uinfo);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;解密后的用户信息：&lt;br&gt;    Array&lt;br&gt;    (&lt;br&gt;        [uid] =&amp;gt; 10000&lt;br&gt;        [name] =&amp;gt; spark&lt;br&gt;        [email] =&amp;gt; spark@icy.com&lt;br&gt;        [sex] =&amp;gt; man&lt;br&gt;        [age] =&amp;gt; 18&lt;br&gt;    )&lt;/p&gt;
&lt;p&gt;读取文件内容&lt;/p&gt;
&lt;p&gt;PHP具有丰富的文件操作函数，最简单的读取文件的函数为file_get_contents，可以将整个文件全部读取到一个字符串中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$content = file_get_contents(&amp;apos;./test.txt&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;file_get_contents也可以通过参数控制读取内容的开始点以及长度。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$content = file_get_contents(&amp;apos;./test.txt&amp;apos;, null, null, 100, 500);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PHP也提供类似于C语言操作文件的方法，使用fopen，fgets，fread等方法，fgets可以从文件指针中读取一行，freads可以读取指定长度的字符串。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$fp = fopen(&amp;apos;./text.txt&amp;apos;, &amp;apos;rb&amp;apos;);
while(!feof($fp)) {
    echo fgets($fp); //读取一行
}
fclose($fp);




$fp = fopen(&amp;apos;./text.txt&amp;apos;, &amp;apos;rb&amp;apos;);
$contents = &amp;apos;&amp;apos;;
while(!feof($fp)) {
    $contents .= fread($fp, 4096); //一次读取4096个字符
}
fclose($fp);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用fopen打开的文件，最好使用fclose关闭文件指针，以避免文件句柄被占用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$filename = &amp;apos;/data/webroot/usercode/resource/test.txt&amp;apos;;
//编写代码读取$filename的文件内容
$contents=file_get_contents($filename);
echo $contents;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this is a test file.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;判断文件是否存在&lt;/p&gt;
&lt;p&gt;一般情况下在对文件进行操作的时候需要先判断文件是否存在，PHP中常用来判断文件存在的函数有两个is_file与file_exists.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$filename = &amp;apos;./test.txt&amp;apos;;
if (file_exists($filename)) {
    echo file_get_contents($filename);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果只是判断文件存在，使用file_exists就行，file_exists不仅可以判断文件是否存在，同时也可以判断目录是否存在，从函数名可以看出，is_file是确切的判断给定的路径是否是一个文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$filename = &amp;apos;./test.txt&amp;apos;;
if (is_file($filename)) {
    echo file_get_contents($filename);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更加精确的可以使用is_readable与is_writeable在文件是否存在的基础上，判断文件是否可读与可写。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$filename = &amp;apos;./test.txt&amp;apos;;
if (is_writeable($filename)) {
    file_put_contents($filename, &amp;apos;test&amp;apos;);
}
if (is_readable($filename)) {
    echo file_get_contents($filename);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;写入内容到文件&lt;/p&gt;
&lt;p&gt;与读取文件对应，PHP写文件也具有两种方式，最简单的方式是采用file_put_contents。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$filename = &amp;apos;./test.txt&amp;apos;;
$data = &amp;apos;test&amp;apos;;
file_put_contents($filename, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上例中，$data参数可以是一个一维数组，当$data是数组的时候，会自动的将数组连接起来，相当于$data=implode(‘’, $data);&lt;/p&gt;
&lt;p&gt;同样的，PHP也支持类似C语言风格的操作方式，采用fwrite进行文件写入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$fp = fopen(&amp;apos;./test.txt&amp;apos;, &amp;apos;w&amp;apos;);
fwrite($fp, &amp;apos;hello&amp;apos;);
fwrite($fp, &amp;apos;world&amp;apos;);
fclose($fp);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取得文件的修改时间&lt;/p&gt;
&lt;p&gt;文件有很多元属性，包括：文件的所有者、创建时间、修改时间、最后的访问时间等。&lt;/p&gt;
&lt;p&gt;fileowner：获得文件的所有者&lt;br&gt;filectime：获取文件的创建时间&lt;br&gt;filemtime：获取文件的修改时间&lt;br&gt;fileatime：获取文件的访问时间&lt;/p&gt;
&lt;p&gt;其中最常用的是文件的修改时间，通过文件的修改时间，可以判断文件的时效性，经常用在静态文件或者缓存数据的更新。&lt;/p&gt;
&lt;p&gt;$mtime = filemtime($filename);&lt;br&gt;echo ‘修改时间：’.date(‘Y-m-d H:i:s’, filemtime($filename));&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$filename = &amp;apos;/data/webroot/usercode/code/resource/test.txt&amp;apos;;
echo &amp;apos;所有者：&amp;apos;.fileowner($filename).&amp;apos;&amp;lt;br&amp;gt;&amp;apos;;
echo &amp;apos;创建时间：&amp;apos;.filectime($filename).&amp;apos;&amp;lt;br&amp;gt;&amp;apos;;
echo &amp;apos;修改时间：&amp;apos;.filemtime($filename).&amp;apos;&amp;lt;br&amp;gt;&amp;apos;;
echo &amp;apos;最后访问时间：&amp;apos;.fileatime($filename).&amp;apos;&amp;lt;br&amp;gt;&amp;apos;;

//给$mtime赋值为文件的修改时间
$mtime = filemtime($filename);; 
//通过计算时间差 来判断文件内容是否有效
if (time() - $mtime &amp;gt; 3600) {
    echo &amp;apos;&amp;lt;br&amp;gt;缓存已过期&amp;apos;;
} else {
    echo file_get_contents($filename);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;所有者：501
创建时间：1446715450
修改时间：1446715450
最后访问时间：1460473202
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;缓存已过期&lt;/p&gt;
&lt;p&gt;取得文件的大小&lt;/p&gt;
&lt;p&gt;通过filesize函数可以取得文件的大小，文件大小是以字节数表示的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$filename = &amp;apos;/data/webroot/usercode/code/resource/test.txt&amp;apos;;
$size = filesize($filename);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要转换文件大小的单位，可以自己定义函数来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getsize($size, $format = &amp;apos;kb&amp;apos;) {
    $p = 0;
    if ($format == &amp;apos;kb&amp;apos;) {
        $p = 1;
    } elseif ($format == &amp;apos;mb&amp;apos;) {
        $p = 2;
    } elseif ($format == &amp;apos;gb&amp;apos;) {
        $p = 3;
    }
    $size /= pow(1024, $p);
    return number_format($size, 3);
}

$filename = &amp;apos;/data/webroot/usercode/code/resource/test.txt&amp;apos;;
$size = filesize($filename);

$size = getsize($size, &amp;apos;kb&amp;apos;); //进行单位转换
echo $size.&amp;apos;kb&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，没法通过简单的函数来取得目录的大小，目录的大小是该目录下所有子目录以及文件大小的总和，因此需要通过递归的方法来循环计算目录的大小。&lt;br&gt;删除文件&lt;/p&gt;
&lt;p&gt;跟Unix系统命令类似，PHP使用unlink函数进行文件删除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unlink($filename);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除文件夹使用rmdir函数，文件夹必须为空，如果不为空或者没有权限则会提示失败。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rmdir($dir);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果文件夹中存在文件，可以先循环删除目录中的所有文件，然后再删除该目录，循环删除可以使用glob函数遍历所有文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foreach (glob(&amp;quot;*&amp;quot;) as $filename) {
   unlink($filename);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;cookie简介&lt;/p&gt;
&lt;p&gt;Cookie是存储在客户端浏览器中的数据，我们通过Cookie来跟踪与存储用户数据。一般情况下，Cookie通过HTTP headers从服务端返回到客户端。多数web程序都支持Cookie的操作，因为Cookie是存在于HTTP的标头之中，
    
    </summary>
    
    
      <category term="cookie session" scheme="http://xwzmsdqbjzyyg.github.io/tags/cookie-session/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的哈希表结构</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/06/08/array-02/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/06/08/array-02/</id>
    <published>2016-06-08T08:01:54.000Z</published>
    <updated>2016-06-08T08:15:24.877Z</updated>
    
    <content type="html">&lt;p&gt;什么叫哈希表？&lt;/p&gt;
&lt;p&gt;散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。–维基百科&lt;/p&gt;
&lt;p&gt;…&lt;br&gt;从定义看哈希表最关键的几个方面&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过一关键码访问（关键码的确定，哈希函数）&lt;/li&gt;
&lt;li&gt;映射到数据结构中（哈希表本身的存储结构）&lt;/li&gt;
&lt;li&gt;映射的处理（冲突或者碰撞检测和处理函数）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于PHP的哈希我们也从上面三个方面进行分析。一般来说对于整形索引进行哈希我们很容易想到的是取模运算，比如array(1=&amp;gt;’a’, 2=&amp;gt;’b’, 3=&amp;gt;’c’)，这类我们可以使用index%3来哈希，不过PHP数组的下标还有更灵活的array(‘a’=’c’, ‘b’=&amp;gt;’d’), 此时选择什么哈希函数？答案是DJBX33A算法（DJBX33A算法，也就是time33算法，是APR默认哈希算法，php, apache, perl, bsddb也都使用time33哈希。对于33这个数，DJB注释中是说，1到256之间的所有奇数，都能达到一个可接受的哈希分布，平均分布大概是86%。而其中33，17，31，63，127，129这几个数在面对大量的哈希运算时有一个更大的优势，就是这些数字能将乘法用位运算配合加减法替换，这样运算速度会更高。gcc编译器开启优化后会自动将乘法转换为位运算。）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static inline ulong zend_inline_hash_func(char *arKey, uint nKeyLength){         
    register ulong hash = 5381;     /* variant with the hash unrolled eight times */      
    for (; nKeyLength &amp;gt;= 8; nKeyLength -= 8） {          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;          
        hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++;      
    }  
    switch (nKeyLength) {          
        case 7: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; /* fallthrough... */          
        case 6: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; /* fallthrough... */          
        case 5: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; /* fallthrough... */          
        case 4: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; /* fallthrough... */          
        case 3: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; /* fallthrough... */          
        case 2: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; /* fallthrough... */          
        case 1: hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *arKey++; break;          
        case 0: break;  
        EMPTY_SWITCH_DEFAULT_CASE()      
    }  
    return hash;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了哈希函数之后那么哈希表本身的存储结构如何？这里需要说明两种PHP底层的数据结构HashTable 和 Bucket&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct _hashtable {  
    uint nTableSize;  
    uint nTableMask;  
    uint nNumOfElements;  
    ulong nNextFreeElement;  
    Bucket *pInternalPointer;  
    Bucket *pListHead;  
    Bucket *pListTail;  
    Bucket **arBuckets;  
    dtor_func_t pDestructor;  
    zend_bool persistent;  
    unsigned char nApplyCount;  
    zend_bool bApplyProtection;  
#if ZEND_DEBUG  
    int inconsistent;  
#endif  
} HashTable  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;……..&lt;/p&gt;
&lt;p&gt;上述结构体定义了PHP底层的存储结构，逐个字段做个解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;nNumOfElements 是PHP数组中实际存储元素的个数，我们使用count,sizeof计算的就是获取的这个值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nTableSize 顾名思义这个是整个哈希表分配的大小（在内部实现的C中分配的数组大小，PHP是动态的但到底层数组是有大小的是静态的）,他的大小有一个固定的申请算法，一般是最接近并且大于当前这个数值的2的乘方，描述的可能有点模糊，举个例子来看，如果PHP数组存储32个整形数据，那么底层申请的nTableSize应该等于32个元素,如果33呢，那么取最近且大于这个数的一个数64，那么分配的大小是64个元素。这样分配的原因是为了能分配足够的内存同样又不会浪费太多的内存。基于哈希的效率考虑，太小那么势必造成哈希之后太多的碰撞查找，如果分配太大那么必然浪费太多内存，这样分配经过实践证明相对在空间和时间上可以获得一个平衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nTableMask 哈希表的掩码数值等于nTableSize-1,他的作用是什么？用来纠正通过上面DBJ算法计算的哈希值在当前nTableSize大小的哈希表中的正确的索引值。比如”foo”通过固定算法之后得出的哈希值是193491849，如果表的大小为64，很明显已经超过了最大索引值，这时候就需要运用哈希表的掩码对其进行矫正实际采用的方法就是与掩码进行位运与运算&lt;/p&gt;
&lt;p&gt;hash  |   193491849 |   0b1011100010000111001110001001&lt;br&gt;&amp;amp; mask  | &amp;amp;        63 | &amp;amp; 0b0000000000000000000000111111&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt; = index | =         9 | = 0b0000000000000000000000001001&lt;/p&gt;
&lt;p&gt;这样做是为了把哈希值大的一样映射到nTalbeSize空间内&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;nNextFreeElement 下一个空闲的元素空间，当我们申请一个空下标元素的时候就需要用到此项，比如$ret[] = ‘apple’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pInternalPointer 存储了内部当前执行的元素的指针，当我们使用一些内部循环函数的时候会用到这个指针比如reset(), current(), prev(), next(), foreach(), end()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pListHead和pListTail则具体指向了该哈希表的第一个和最后一个元素，对应就是数组的起始和结束元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7.arBuckets 这个就是实际存储的C的内部数组，具体的结构后面还会详细讨论。这里记录的是一个指向指针的指针Bucket **。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;pDestructor 是一个析构函数，当某个值被从哈希表删除的时候会触发此函数。他还有一个主要作用是用于变量的GC回收。在PHP里面GC是通过引用计数实现的，当一个变量的引用计数变为0，就会被PHP的GC回收&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;persistent 定义了hashtable是否能在多次request中获得持久存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nApplyCount 和 bApplyProtection 是用来防止无限递归的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inconsistent 是在调试模式下捕获对HT不正确的使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来讨论HT中真正的数据存储单元Buckets结构:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct bucket {  
    ulong h;  
    uint nKeyLength;  
    void *pData;  
    void *pDataPtr;  
    struct bucket *pListNext;  
    struct bucket *pListLast;  
    struct bucket *pNext;  
    struct bucket *pLast;  
    const char *arKey;  
} Bucket;  
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;h是一个哈希值 未经过掩码矫正的哈希DBJ算出来的原始值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;arKey,用来记录作为哈希计算的字符串, nKeyLength是哈希字符串的长度，对于整形键值是用不到这两项的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pData以及pDataPtr是实际存储数据的指针，在PHP里面他们通常是指向一个zval结构（该结构广泛被PHP用来内部存储各种变量以及对象）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pListNext, pListLast 指定了整个数组的顺序, PHP中的遍历就是通过哈希结构体中的pListHead bucket依次遍历pNext直到数组结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pNext和pLast 这两个指针是用来解决哈希冲突的，这个在下面哈希冲突中详细介绍，在PHP的哈希表冲突的处理采用的是拉链法也就是在每个可能冲突的键值位置拉出一个链表来存储对应的键值数据(哈希冲突还有什么解决方法？寻址法不过在PHP中并是通过这个方式实现的)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于哈希冲突，PHP的实现是通过拉链法实现的，当键值被哈希到同一个槽位（bucket）就是发生了冲突，这时候会从bucket拉出一个链表把冲突的元素顺序链接起来。pListNext,pListLast就是实现这个拉链的结构的&lt;/p&gt;
&lt;p&gt;至此PHP的哈希的基本结构介绍完毕，实现是非常complex的，但对比灵活无比的PHP数组这点点复杂性值，太TM值了。&lt;/p&gt;
&lt;p&gt;关于那两队对指针，国外有网站上搞错了，这里把检测哈希冲突的PHP函数贴出来，pNext指针的作用就一目了然了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ZEND_API int zend_hash_exists(const HashTable *ht, const char *arKey, uint nKeyLength)  
{  
    ulong h;  
    uint nIndex;  
    Bucket *p;  

    IS_CONSISTENT(ht);  

    h = zend_inline_hash_func(arKey, nKeyLength);  
    nIndex = h &amp;amp; ht-&amp;gt;nTableMask;  

    p = ht-&amp;gt;arBuckets[nIndex];  
    while (p != NULL) {  
        if (p-&amp;gt;arKey == arKey ||  
            ((p-&amp;gt;h == h) &amp;amp;&amp;amp; (p-&amp;gt;nKeyLength == nKeyLength) &amp;amp;&amp;amp; !memcmp(p-&amp;gt;arKey, arKey, nKeyLength))) {  
                return 1;  
        }  
        p = p-&amp;gt;pNext;  
    }  
    return 0;  
}  
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;什么叫哈希表？&lt;/p&gt;
&lt;p&gt;散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。–维基百科&lt;
    
    </summary>
    
    
      <category term="数组" scheme="http://xwzmsdqbjzyyg.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>PHP 数组浅析</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/06/08/array-01/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/06/08/array-01/</id>
    <published>2016-06-08T07:06:04.000Z</published>
    <updated>2016-06-08T07:22:23.084Z</updated>
    
    <content type="html">&lt;p&gt;一、概要&lt;br&gt;    简单介绍及基本使用&lt;br&gt;    php数组 常用标准库函数使用&lt;br&gt;    php数组模拟常见数据结构&lt;br&gt;    php数组使用须知与注意点&lt;br&gt;    FAQ&lt;br&gt;二、简单介绍及基本使用&lt;br&gt;    PHP 中的数组实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。&lt;br&gt;    通过&amp;lt;?php $arr = array(1, 2, 3, 4); 便定义了一个普通数组&lt;br&gt;    我们还可以定义关联数组&lt;/p&gt;
&lt;p&gt;&amp;lt;?php  $arr = array(‘a’ =&amp;gt; 1, ‘z’ =&amp;gt; 100); &amp;gt;&lt;br&gt;  ……&lt;br&gt;    如果php版本 &amp;gt;= 5.4 , 我们可以使用更为简洁的方式定义数组&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, 2, 3, 4];&lt;br&gt;$arr = [‘a’ =&amp;gt; 1, ‘z’ =&amp;gt; 100];&lt;br&gt;    php 数组很强大， 可以定义混合类型数组&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, ‘hello’ =&amp;gt; ‘11’, ‘arr’ =&amp;gt; [1, ‘a’=&amp;gt;’b’]];&lt;br&gt;……&lt;br&gt;    关于数组的访问操作，可以通过[index] 访问：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, ‘hello’ =&amp;gt; ‘11’, ‘arr’ =&amp;gt; [1, ‘a’=&amp;gt;’b’]];&lt;br&gt;var_dump($arr[0]); // 1&lt;br&gt;var_dump($arr[‘arr’]); // [1, ‘a’ =&amp;gt; ‘b’]&lt;br&gt;……&lt;br&gt;    也可以通过[] 修改数组元素的值&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, ‘hello’ =&amp;gt; ‘11’, ‘arr’ =&amp;gt; [1, ‘a’=&amp;gt;’b’]];&lt;br&gt;$arr[0] = ‘test’;&lt;br&gt;var_dump($arr);&lt;br&gt;……&lt;br&gt;    你也可以在初始化数组继续添加数组元素&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, 2, 3, 4];&lt;br&gt;//追加元素&lt;br&gt;$arr[] = ‘a’;&lt;br&gt;// 添加 key, value&lt;br&gt;$arr[‘test’] = ‘b’;&lt;br&gt;……&lt;br&gt;    当然，删除数组元素的操作必须支持&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, ‘hello’ =&amp;gt; ‘11’, ‘arr’ =&amp;gt; [1, ‘a’=&amp;gt;’b’]];&lt;br&gt;unset($arr[‘hello’]);&lt;br&gt;var_dump($arr[‘hello’]);  // null&lt;br&gt;……&lt;br&gt;    开发中经常需要遍历数组, 可使用 foreach ：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, ‘hello’ =&amp;gt; ‘11’, ‘arr’ =&amp;gt; [1, ‘a’=&amp;gt;’b’]];&lt;br&gt;foreach($arr as $key =&amp;gt; $value) {&lt;br&gt;    var_dump($key . ‘ =&amp;gt; ‘ . $value);&lt;br&gt;}&lt;br&gt;……&lt;br&gt;更多数组遍历的方法请参考php-数组遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组之间的比较，数组无法比较大小， 但可以根据一定条件判断是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;// $a == $b 相等 如果 $a 和 $b 具有相同的键／值对则为 TRUE。&lt;br&gt;// $a === $b 全等 如果 $a 和 $b 具有相同的键／值对并且顺序和类型都相同则为 TRUE。&lt;/p&gt;
&lt;p&gt;$a = [1, 2];&lt;br&gt;$b = [‘1’ =&amp;gt; 2, 0 =&amp;gt; 1];&lt;/p&gt;
&lt;p&gt;var_dump($a == $b); // true&lt;br&gt;var_dump($a === $b); // false&lt;/p&gt;
&lt;p&gt;三、实用的数组工具函数&lt;br&gt;掌握了数组的基本操作(定义使用，增删改查， 遍历) 之后，你就可以在开发中使用数组， 但只有这些操作是远远不够的，为了满足复杂多变的开发场景对数组操作的需求，PHP 提供了功能强大的一套 Array 操作的函数&lt;br&gt;……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取数组长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, 2, 3];&lt;br&gt;var_dump(count($arr)); // 3&lt;br&gt;……&lt;br&gt;    希望判断一个变量是否是数组，可以通过 is_array()：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, 2, 3];&lt;br&gt;$notArr = ‘111’;&lt;br&gt;var_dump(is_array($arr)); // true&lt;br&gt;var_dump(is_array($notArr)); // false&lt;br&gt;……&lt;br&gt;    更具key 或者 value， 判断元素 是否在数组中&lt;/p&gt;
&lt;p&gt;// 判断key 是否在数组中&lt;br&gt;$arr = [‘a’ =&amp;gt; 2, 4];&lt;br&gt;var_dump(isset($arr[‘a’])); // true&lt;br&gt;var_dump(array_key_exists(‘a’, $arr)); // true&lt;/p&gt;
&lt;p&gt;// 判断 value 是否在数组中&lt;br&gt;in_array(5, $arr);  // false&lt;br&gt;    获取数组所有键(keys)&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [‘a’ =&amp;gt; 2, 4];&lt;br&gt;$keys = array_keys($arr); // [‘a’, 1]&lt;br&gt;……&lt;br&gt;    获取数组的所有值 (values)&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [‘a’ =&amp;gt; 2, 4];&lt;br&gt;$values = array_values($arr); // [2, 4]&lt;br&gt;……&lt;br&gt;    统计数组各个元素值出现的次数 可以使用 array_count_values：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, 3, 2, ‘a’ =&amp;gt; 1, ‘b’ =&amp;gt; 2];&lt;br&gt;var_dump(array_count_values($arr));&lt;br&gt;/&lt;em&gt;&lt;br&gt;array(3) {&lt;br&gt;  [1]=&amp;gt;&lt;br&gt;  int(2)&lt;br&gt;  [3]=&amp;gt;&lt;br&gt;  int(1)&lt;br&gt;  [2]=&amp;gt;&lt;br&gt;  int(2)&lt;br&gt;}
&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;数组与数组之间的操作：数组可以看做一个集合， 集合间的操作(交集，差集，并集， 补集， 比较等) php 也提供相应的方法实现&lt;br&gt;……&lt;br&gt;    数组的合并&lt;br&gt;&amp;lt;?php&lt;br&gt;$arr1 = [‘a’ =&amp;gt; 1, 2, ‘b’ =&amp;gt; 3];&lt;br&gt;$arr2 = [‘b’ =&amp;gt; 5, 2];&lt;br&gt;var_dump( array_merge($arr1, $arr2) );&lt;br&gt;/*&lt;br&gt;array(4) {&lt;br&gt;  [“a”]=&amp;gt;&lt;br&gt;  int(1)&lt;br&gt;  [0]=&amp;gt;&lt;br&gt;  int(2)&lt;br&gt;  [“b”]=&amp;gt;&lt;br&gt;  int(5)&lt;br&gt;  [1]=&amp;gt;&lt;br&gt;  int(2)&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;// 你也可以使用 + 操作符, 请注意两种方法结果的差别&lt;br&gt;var_dump($arr1 + $arr2);&lt;br&gt;*/&lt;br&gt;    如果是需要计算两个或跟多数组value的交集, 可使用 array_intersect&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr1 = [1, 2, 3];&lt;br&gt;$arr2 = [5, 2];&lt;br&gt;var_dump( array_intersect($arr1, $arr2) );  // [2]&lt;br&gt;……&lt;br&gt;    数组的差集 (按值value 和 按key)&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$a = [1, 2];&lt;br&gt;$b = [‘1’ =&amp;gt; 2, 0 =&amp;gt; 1, 4];&lt;/p&gt;
&lt;p&gt;//array_diff 按照索引 和 值 比较差异&lt;br&gt;var_dump(array_diff($a, $b));&lt;/p&gt;
&lt;p&gt;// array_diff_key() 函数用于比较两个（或更多个）数组的键名 ，并返回差集&lt;br&gt;var_dump(array_diff_key($a, $b));&lt;br&gt;……&lt;br&gt;    如果需要获取子数组， 可以通过 array_slice 产生类似 python 切片的效果&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$arr = [1, 2, 3, 4, 5, 6, 7, 8];&lt;br&gt;// 从第3个元素开始, 直到结束&lt;br&gt;var_dump(array_slice($arr, 2));&lt;/p&gt;
&lt;p&gt;// 从第3个元素开始, 长度为4&lt;br&gt;var_dump(array_slice($arr, 2, 4));&lt;/p&gt;
&lt;p&gt;// 从第3个元素开始，到倒数第3个元素&lt;br&gt;var_dump(array_slice($arr, 2, -2));&lt;/p&gt;
&lt;p&gt;// 注意 索引的差别&lt;br&gt;var_dump(array_slice($arr, 2, -2, true));&lt;br&gt;……&lt;br&gt;    关于数组的排序操作，也是比较常见的开发需求，需要注意的是：php排序函数都是直接作用于数组本身， 而不是返回一个新的有序的数组。, 以下代码提供几种常见的场景， 更多请参考php对数组进行排序：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;/p&gt;
&lt;p&gt;// 按照值(value)升序排序, 索引更新&lt;br&gt;$arr = [6,’a’=&amp;gt;2, 3, 4, 6, -1, 7, 8];&lt;br&gt;sort($arr);&lt;br&gt;var_dump($arr);&lt;/p&gt;
&lt;p&gt;// 按照值(value)升序排序, 索引保持&lt;br&gt;$arr = [6,’a’=&amp;gt;2, 3, 4, 6, -1, 7, 8];&lt;br&gt;asort($arr);&lt;br&gt;var_dump($arr);&lt;/p&gt;
&lt;p&gt;// 按照值(value)降序排序, 索引保持&lt;br&gt;$arr = [6,’a’=&amp;gt;2, 3, 4, 6, -1, 7, 8];&lt;br&gt;arsort($arr);&lt;br&gt;var_dump($arr);&lt;/p&gt;
&lt;p&gt;// 按照 键(key)进行升序排序 , 索引保持&lt;br&gt;$arr = [‘a’ =&amp;gt; 10, ‘c’ =&amp;gt; 1, ‘b’ =&amp;gt; 12];&lt;br&gt;ksort($arr);&lt;br&gt;var_dump($arr);&lt;/p&gt;
&lt;p&gt;// 按照 键(key)进行降序排序 , 索引保持&lt;br&gt;$arr = [‘a’ =&amp;gt; 10, ‘c’ =&amp;gt; 1, ‘b’ =&amp;gt; 12];&lt;br&gt;krsort($arr);&lt;br&gt;var_dump($arr);&lt;/p&gt;
&lt;p&gt;// 用户自定义排序, 根据值(value) , 索引更新&lt;br&gt;// 请注意：对于自定义的比较函数，&lt;br&gt;// 在第一个参数小于，等于或大于第二个参数时，&lt;br&gt;// 该比较函数必须相应地返回一个小于，等于或大于 0 的整数。&lt;br&gt;function cmp($val1, $val2)&lt;br&gt;{&lt;br&gt;    if($val1 &amp;gt; $val2) {&lt;br&gt;        return 1;&lt;br&gt;    } elseif ($val1 == $val2) {&lt;br&gt;        return 0;&lt;br&gt;    } else {&lt;br&gt;        return -1;&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;$arr = [&lt;br&gt;    ‘a’ =&amp;gt; 1,&lt;br&gt;    ‘A’ =&amp;gt; 3,&lt;br&gt;    ‘B’ =&amp;gt; 2,&lt;br&gt;];&lt;/p&gt;
&lt;p&gt;usort($arr, cmp);&lt;br&gt;var_dump($arr);&lt;/p&gt;
&lt;p&gt;// 根据key 自定义排序规则，请使用 uksort(), 用法同usort()&lt;br&gt;……&lt;br&gt;    关于数组与字符串之间的操作一般有切割字符串，合并数组元素转为字符串两种操作，可以借助explode与implode实现&lt;br&gt;&amp;lt;?php&lt;br&gt;var_dump(explode(‘,’, “a,a,a,a,a,a”)); // 以,为分割符将字符串”a,a,a,a,a,a” 切割成数组&lt;/p&gt;
&lt;p&gt;var_dump(implode(‘-‘, [1, 2, 3, 4, 5])); //以 - 为 拼接符 将 数组[1, 2, 3, 4, 5] 拼接成字符串&lt;/p&gt;
&lt;p&gt;关于php 更多数组相关的函数， 可以参考 官方文档php数组函数列表&lt;br&gt;四、数组模拟常见数据结构&lt;/p&gt;
&lt;p&gt;php 数组可以模拟常见的数据结构，最显而易见的便是 映射表 和 字典， 这里简单介绍php数组对栈和队列的模拟。&lt;br&gt;    模拟栈(FILO)&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$stack = [1, 2, 3, 4];&lt;/p&gt;
&lt;p&gt;//入栈&lt;br&gt;array_push($stack, -1);&lt;br&gt;var_dump($stack); // [1, 2, 3, 4, -1]&lt;/p&gt;
&lt;p&gt;//出栈&lt;br&gt;$e = array_pop($stack);&lt;br&gt;var_dump($e); // -1&lt;br&gt;var_dump($stack);  // [1, 2, 3, 4]&lt;br&gt;    模拟队列 (FIFO)&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;br&gt;$queue = [];&lt;/p&gt;
&lt;p&gt;//入队列&lt;br&gt;array_unshift($queue, 1);&lt;br&gt;array_unshift($queue, 2);&lt;br&gt;array_unshift($queue, 3);&lt;br&gt;array_unshift($queue, 4);&lt;/p&gt;
&lt;p&gt;//出队列&lt;br&gt;$e = array_pop($queue);&lt;br&gt;var_dump($e); // 1&lt;br&gt;$e = array_pop($queue);&lt;br&gt;var_dump($e); // 2&lt;br&gt;$e = array_pop($queue);&lt;br&gt;var_dump($e); // 3&lt;br&gt;$e = array_pop($queue);&lt;br&gt;var_dump($e); // 4&lt;/p&gt;
&lt;p&gt;五、php数组使用须知与注意点&lt;br&gt;    php 数组 key值 会存在以下强制转换&lt;br&gt;        包含有合法整型值的字符串会被转换为整型。例如键名 “8” 实际会被储存为 8。但是 “08” 则不会强制转换，因为其不是一个合法的十进制数值。&lt;br&gt;        浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。&lt;br&gt;        布尔值也会被转换成整型。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。&lt;br&gt;        Null 会被转换为空字符串，即键名 null 实际会被储存为 “”。&lt;br&gt;        数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。&lt;/p&gt;
&lt;p&gt;因此以下代码可能导致意外的结果，请注意以下代码的输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;/p&gt;
&lt;p&gt;$arr = [1, 2, ‘8’ =&amp;gt; 3];&lt;/p&gt;
&lt;p&gt;$arr[false] = -20;&lt;br&gt;var_dump($arr); // [-20, 2, ‘8’ =&amp;gt; 3]&lt;/p&gt;
&lt;p&gt;$arr[8] = 20;&lt;br&gt;var_dump($arr); // [-20, 2, 8 =&amp;gt; 20]&lt;/p&gt;
&lt;p&gt;$arr[8.7] = 15;&lt;br&gt;var_dump($arr); // [-20, 2, 8 =&amp;gt; 15]&lt;/p&gt;
&lt;p&gt;$arr[“8.7”] = 10;&lt;br&gt;var_dump($arr); // [-20, 2, 8 =&amp;gt; 10]&lt;/p&gt;
&lt;p&gt;$arr[$val]  = 5; // 注意$val之前为声明，因此默认值为null, 数组key为null时会被转为””空串&lt;br&gt;var_dump($arr); // [-20, 2, 8 =&amp;gt; 10, “” =&amp;gt; 5]&lt;/p&gt;
&lt;p&gt;$arr[bar] = 6; // 标识符被转化为 ‘bar’&lt;br&gt;var_dump($arr); // [-20, 2, 8 =&amp;gt; 10, “” =&amp;gt; 5, ‘bar’ =&amp;gt; 6]&lt;/p&gt;
&lt;p&gt;……&lt;br&gt;    关于php数组的类型转换&lt;br&gt;    php数组可以将其他一切类型转为数组，转化的效果请参考一下代码，重点观察对 null 和 object对象的转化：&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;/p&gt;
&lt;p&gt;$var = true;&lt;br&gt;var_dump((array)$var);&lt;br&gt;/&lt;em&gt; array(1) {&lt;br&gt;  [0]=&amp;gt;&lt;br&gt;  bool(true)&lt;br&gt;}&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;$var = 1;&lt;br&gt;var_dump((array)$var);&lt;br&gt;/&lt;em&gt; array(1) {&lt;br&gt;  [0]=&amp;gt;&lt;br&gt;  int(1)&lt;br&gt;}&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;$var = 1.1;&lt;br&gt;var_dump((array)$var);&lt;br&gt;/&lt;em&gt; array(1) {&lt;br&gt;  [0]=&amp;gt;&lt;br&gt;  float(1.1)&lt;br&gt;}&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;$var = “111”;&lt;br&gt;var_dump((array)$var);&lt;br&gt;/&lt;em&gt; array(1) {&lt;br&gt;  [0]=&amp;gt;&lt;br&gt;  string(3) “111”&lt;br&gt;}&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;$var = null;&lt;br&gt;var_dump((array)$var);  // 返回空数组&lt;br&gt;/&lt;em&gt; array(0) {&lt;br&gt;} &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;class Cls { public $a = 1; protected $b = 2; private $c = 3; }&lt;br&gt;var_dump((array)(new Cls)); // 可见性不同 key值格式有所不同&lt;br&gt;/&lt;em&gt; array(3) {&lt;br&gt;  [“a”]=&amp;gt;&lt;br&gt;  int(1)&lt;br&gt;  [“&lt;/em&gt;b”]=&amp;gt;&lt;br&gt;  int(2)&lt;br&gt;  [“Clsc”]=&amp;gt;&lt;br&gt;  int(3)&lt;br&gt;} */&lt;/p&gt;
&lt;p&gt;关于PHP类型转换的了解，请参考PHP-类型转换的判别&lt;br&gt;六、FAQ&lt;br&gt;……&lt;br&gt;    如何添加数组元素更为高效? array_push($arr, key, value) or $arr[key] = value ? 答： 后者更为高效， 更多细节请参考官方资料&lt;br&gt;    isset or array_key_exists() ? 答：&lt;br&gt;        对于存在key的数组，如果 对应的value = null ， isset($arr[key]) 会返回 false；而对于array_key_exists 只要对应key存在就会返回true；&lt;br&gt;        然而在效率方面，isset 效率 高于array_key_eixsts&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一、概要&lt;br&gt;    简单介绍及基本使用&lt;br&gt;    php数组 常用标准库函数使用&lt;br&gt;    php数组模拟常见数据结构&lt;br&gt;    php数组使用须知与注意点&lt;br&gt;    FAQ&lt;br&gt;二、简单介绍及基本使用&lt;br&gt;    PHP 中的数组实际上是一个有序映
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置lnmp</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/06/01/lnmp-01/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/06/01/lnmp-01/</id>
    <published>2016-06-01T08:12:56.000Z</published>
    <updated>2016-06-08T07:12:22.301Z</updated>
    
    <content type="html">&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;第一步：Apache安装(已更新到2.2.22)&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;下载 去 &lt;a href=&quot;http://www.apache.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.apache.org&lt;/a&gt; 自己找新的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://httpd.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://httpd.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 国内有很多镜像点例如”人人”和”163”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://labs.renren.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://labs.renren.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意要找httpd，因为apache下有很多项目，其中httpd就是web服务器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://labs.renren.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://labs.renren.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英文文档：&lt;a href=&quot;http://httpd.apache.org/docs/2.2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://httpd.apache.org/docs/2.2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文文档： &lt;a href=&quot;http://www.php100.com/manual/apache2/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php100.com/manual/apache2/index.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#wget &lt;a href=&quot;http://labs.renren.com/apache-mirror/httpd/httpd-2.2.22.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://labs.renren.com/apache-mirror/httpd/httpd-2.2.22.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#tar zxvf httpd-2.2.22.tar.gz&lt;/p&gt;
&lt;p&gt;#cd ./httpd-2.2.22&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr/local/apache2/ –enable-proxy –enable-ssl –enable-cgi –enable-rewrite –enable-so –enable-module=so&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install&lt;/p&gt;
&lt;p&gt;说明：如果make不成功，那么是configure不成，例如你缺少ssl组件，可以去掉&lt;/p&gt;
&lt;h2 id=&quot;–enable-ssl&quot;&gt;&lt;a href=&quot;#–enable-ssl&quot; class=&quot;headerlink&quot; title=&quot;–enable-ssl&quot;&gt;&lt;/a&gt;–enable-ssl&lt;/h2&gt;&lt;p&gt;如果出现“No recognized SSL/TLS toolkit detected”错误&lt;/p&gt;
&lt;p&gt;#yum -y install openssl openssl-devel&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果Make: command not found&lt;/p&gt;
&lt;p&gt;看看是不是make没装&lt;/p&gt;
&lt;h1 id=&quot;rpm-qa-grep-make&quot;&gt;&lt;a href=&quot;#rpm-qa-grep-make&quot; class=&quot;headerlink&quot; title=&quot;rpm -qa|grep make&quot;&gt;&lt;/a&gt;rpm -qa|grep make&lt;/h1&gt;&lt;p&gt;如果没有信息那么说明make没装&lt;/p&gt;
&lt;h2 id=&quot;yum-install-make-即可&quot;&gt;&lt;a href=&quot;#yum-install-make-即可&quot; class=&quot;headerlink&quot; title=&quot;#yum install make 即可&quot;&gt;&lt;/a&gt;#yum install make 即可&lt;/h2&gt;&lt;p&gt;手动启动&lt;/p&gt;
&lt;h1 id=&quot;usr-local-apache2-bin-apachectl-start&quot;&gt;&lt;a href=&quot;#usr-local-apache2-bin-apachectl-start&quot; class=&quot;headerlink&quot; title=&quot;/usr/local/apache2/bin/apachectl start&quot;&gt;&lt;/a&gt;/usr/local/apache2/bin/apachectl start&lt;/h1&gt;&lt;p&gt;重启&lt;/p&gt;
&lt;h1 id=&quot;usr-local-apache2-bin-apachectl-restart&quot;&gt;&lt;a href=&quot;#usr-local-apache2-bin-apachectl-restart&quot; class=&quot;headerlink&quot; title=&quot;/usr/local/apache2/bin/apachectl restart&quot;&gt;&lt;/a&gt;/usr/local/apache2/bin/apachectl restart&lt;/h1&gt;&lt;p&gt; 如果报错说：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not reliably determine the server’s fully qualified domain name, using 127.0.1.1 for ServerName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要修改/usr/local/apache2/conf/httpd.conf在&lt;/p&gt;
&lt;p&gt;#serverName www.example.com:80&lt;/p&gt;
&lt;p&gt;这个位置修改为：&lt;/p&gt;
&lt;p&gt;serverName localhost:80&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;YUM自动安装的启动&lt;/p&gt;
&lt;p&gt;#service httpd restart&lt;/p&gt;
&lt;p&gt;输入这个会提示出错 httpd未被被识别的服务&lt;/p&gt;
&lt;p&gt;这个请见本博客另一篇介绍&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这就说明安装成功了。&lt;/p&gt;
&lt;p&gt;自己在浏览器输入：&lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样就说明成功了！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;防火墙配置&lt;/p&gt;
&lt;p&gt;注意如果你希望在本地机器例如xp访问虚拟机的网页，如果是centos6需要修改防火墙启动80端口&lt;/p&gt;
&lt;p&gt;/etc/sysconfig&lt;/p&gt;
&lt;p&gt;[root@centos6 ~]# vim /etc/sysconfig/iptables&lt;/p&gt;
&lt;p&gt;添加下面一行，打开防火墙80端口:&lt;/p&gt;
&lt;p&gt;-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT&lt;br&gt;重启防火墙&lt;/p&gt;
&lt;p&gt;#/etc/init.d/iptables restart&lt;/p&gt;
&lt;p&gt;查看CentOS防火墙信息：/etc/init.d/iptables status&lt;/p&gt;
&lt;p&gt;关闭CentOS防火墙服务：/etc/init.d/iptables stop&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;开机加入自动启动服务&lt;/p&gt;
&lt;p&gt;编辑rc.local文件&lt;/p&gt;
&lt;p&gt;#vi /etc/rc.d/rc.local&lt;/p&gt;
&lt;p&gt;加入如下启动命令&lt;br&gt;/usr/sbin/apachectl start&lt;br&gt;/etc/rc.d/init.d/mysqld start&lt;br&gt;/etc/rc.d/init.d/smb start&lt;br&gt;/usr/local/subversion/bin/svnserve -d&lt;/p&gt;
&lt;p&gt;注意：我的这个路径是yum安装这些服务得到的路径，填写时要根据自己的安装路径，找不到可以借助whereis命令，主要是找到apachectl 、mysqld 、smb 这三个启动文件。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;增加权限和文件格式转换（不然apache会报没权限执行文件）&lt;/p&gt;
&lt;p&gt;#chmod +x   文件&lt;/p&gt;
&lt;p&gt;#dos2unix   文件&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ab测试&lt;/p&gt;
&lt;p&gt;#ab -n 1000  -c  10 &lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;卸载apache&lt;/p&gt;
&lt;p&gt;如果是源码安装&lt;/p&gt;
&lt;p&gt;#rm   -rf   你的apache安装路径&lt;/p&gt;
&lt;p&gt;同样作用于其他&lt;/p&gt;
&lt;p&gt;========================&lt;/p&gt;
&lt;p&gt;httpd启用虚拟主机&lt;/p&gt;
&lt;p&gt;#Include conf/extra/httpd-vhosts.conf&lt;/p&gt;
&lt;p&gt;httpd-vhosts.conf&lt;/p&gt;
&lt;p&gt;&lt;virtualhost *:80=&quot;&quot;&gt;&lt;br&gt;    ServerAdmin webmaster@dummy-host.example.com&lt;br&gt;    DocumentRoot “/www/“&lt;/virtualhost&gt;&lt;/p&gt;
&lt;p&gt;&lt;directory&gt;&lt;/directory&gt;&lt;/p&gt;
&lt;p&gt;#拒绝所有请求&lt;/p&gt;
&lt;h1 id=&quot;Deny-from-all&quot;&gt;&lt;a href=&quot;#Deny-from-all&quot; class=&quot;headerlink&quot; title=&quot;Deny from all&quot;&gt;&lt;/a&gt;Deny from all&lt;/h1&gt;&lt;p&gt;#是否显示列表&lt;/p&gt;
&lt;h1 id=&quot;Options-Indexes-FollowSymLinks&quot;&gt;&lt;a href=&quot;#Options-Indexes-FollowSymLinks&quot; class=&quot;headerlink&quot; title=&quot;Options Indexes FollowSymLinks&quot;&gt;&lt;/a&gt;Options Indexes FollowSymLinks&lt;/h1&gt;&lt;p&gt;#是否启用rewrite&lt;/p&gt;
&lt;h1 id=&quot;AllowOverride-all&quot;&gt;&lt;a href=&quot;#AllowOverride-all&quot; class=&quot;headerlink&quot; title=&quot;AllowOverride all&quot;&gt;&lt;/a&gt;AllowOverride all&lt;/h1&gt;&lt;p&gt;========================&lt;br&gt;YUM方式安装的，这样卸载：&lt;/p&gt;
&lt;p&gt;#yum remove httpd&lt;/p&gt;
&lt;p&gt;否则要用&lt;/p&gt;
&lt;p&gt;#rpm -qa|grep httpd&lt;/p&gt;
&lt;p&gt;一个个删除&lt;/p&gt;
&lt;h1 id=&quot;rpm-e-……&quot;&gt;&lt;a href=&quot;#rpm-e-……&quot; class=&quot;headerlink&quot; title=&quot;rpm -e  ……&quot;&gt;&lt;/a&gt;rpm -e  ……&lt;/h1&gt;&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;第二步 MySQL安装&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;第一种方法：使用yum自动安装&lt;/p&gt;
&lt;p&gt;#yum -y install mysql-server&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二种：下载源码编译安装&lt;/p&gt;
&lt;p&gt;#wget &lt;a href=&quot;http://mysql.cdpa.nsysu.edu.tw/Downloads/MySQL-5.1/mysql-5.1.57.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mysql.cdpa.nsysu.edu.tw/Downloads/MySQL-5.1/mysql-5.1.57.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#tar zxvf mysql-5.1.57.tar.gz&lt;/p&gt;
&lt;p&gt;#cd mysql-5.1.57&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr/local/mysql –with-mysqld-user=mysql –with-charset=gbk –bindir=/usr/local/bin –sbindir=/usr/local/sbin –with-plugins=innobase –with-partition&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install&lt;/p&gt;
&lt;p&gt;#cd /usr/local/mysql&lt;/p&gt;
&lt;p&gt;#mysql_install_db&lt;/p&gt;
&lt;p&gt;#chown -R mysql:mysql *&lt;/p&gt;
&lt;p&gt;#cp /usr/local/mysql/share/mysql/mysql.server /etc/init.d/mysql&lt;/p&gt;
&lt;p&gt;#/etc/rc.d/mysql start (加入到/etc/rc.local 以便系统重启后自动启动mysql)&lt;/p&gt;
&lt;p&gt;修改/etc/rc.local&lt;/p&gt;
&lt;p&gt;说明：请修改mysql配置文件my.cnf中wait_timeout = 600（有些程序执行时间较长，mysql超时时间如果太短的话，容易发生mysql server has go away的错误）&lt;/p&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;p&gt;安装完成后，需要拷贝一份my.cnf到ect目录下，使用support-files目录中的一个作为模板。在这个目录中有4个模板文件，是根据不同机器的内存定制的。&lt;/p&gt;
&lt;p&gt;#cp support-files/my-medium.cnf /etc/my.cnf&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;第三步 PHP安装(已更新到5.4.8版)&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;去www.php.net找最新的版本&lt;/p&gt;
&lt;p&gt;5.4安装&lt;/p&gt;
&lt;p&gt;#wget  &lt;a href=&quot;http://cn2.php.net/get/php-5.4.8.tar.gz/from/this/mirror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cn2.php.net/get/php-5.4.8.tar.gz/from/this/mirror&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#tar zxvf  php-5.4.8.tar.gz&lt;/p&gt;
&lt;p&gt;#cd php-5.4.8&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr/local/php –with-apxs2=/usr/local/apache2/bin/apxs –with-mysql-dir=/usr/local/mysql&lt;/p&gt;
&lt;p&gt;如果失败 可能原因有各种各样&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果提示：Cannot find MySQL header files under /date/mysql.&lt;/p&gt;
&lt;p&gt;这个是缺少了 mysql-devel 安装包，用&lt;br&gt;yum -y install mysql-devel 即可解决！&lt;/p&gt;
&lt;p&gt;#yum -y install mysql-devel&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果提示：xml2-config not found. Please check your libxml2 installation.&lt;/p&gt;
&lt;p&gt;需要安装libxml2&lt;/p&gt;
&lt;p&gt;#yum install libxml2-devel&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果提示：Try adding –with-zlib-dir=&lt;dir&gt;试着添加一下 zlib的路径，如下&lt;/dir&gt;&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr/local/php –with-apxs2=/usr/local/apache2/bin/apxs –with-mysql-dir=/usr/local/mysql –with-zlib-dir=/usr/local/zlib&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;完全成功才可以编译安装&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;安装失败如果提示：Cannot load /usr/local/apache2/modules/libphp5.so into server:&lt;/p&gt;
&lt;p&gt;原因：是Linux有一个SELinux保护模式引起的。&lt;/p&gt;
&lt;p&gt; 解决办法：&lt;br&gt;1关闭SELINUX的方法:&lt;br&gt;vi /etc/selinux/config 将SELINUX=enforcing 改成SELINUX=disabled 需要重启&lt;br&gt;这个方法可能会对服务器带来风险。&lt;/p&gt;
&lt;p&gt;2不关闭SELINUX的方法:&lt;/p&gt;
&lt;h1 id=&quot;setenforce-0&quot;&gt;&lt;a href=&quot;#setenforce-0&quot; class=&quot;headerlink&quot; title=&quot;setenforce 0&quot;&gt;&lt;/a&gt;setenforce 0&lt;/h1&gt;&lt;h1 id=&quot;chcon-c-v-R-u-system-u-r-object-r-t-textrel-shlib-t-usr-local-apache-modules-libphp5-so&quot;&gt;&lt;a href=&quot;#chcon-c-v-R-u-system-u-r-object-r-t-textrel-shlib-t-usr-local-apache-modules-libphp5-so&quot; class=&quot;headerlink&quot; title=&quot;chcon -c -v -R -u system_u -r object_r -t textrel_shlib_t /usr/local/apache/modules/libphp5.so&quot;&gt;&lt;/a&gt;chcon -c -v -R -u system_u -r object_r -t textrel_shlib_t /usr/local/apache/modules/libphp5.so&lt;/h1&gt;&lt;h1 id=&quot;service-httpd-restart&quot;&gt;&lt;a href=&quot;#service-httpd-restart&quot; class=&quot;headerlink&quot; title=&quot;service httpd restart&quot;&gt;&lt;/a&gt;service httpd restart&lt;/h1&gt;&lt;h1 id=&quot;setenforce-1&quot;&gt;&lt;a href=&quot;#setenforce-1&quot; class=&quot;headerlink&quot; title=&quot;setenforce 1&quot;&gt;&lt;/a&gt;setenforce 1&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;复制php.ini配置文件&lt;/p&gt;
&lt;p&gt;参考此文&lt;a href=&quot;http://blog.csdn.net/21aspnet/article/details/7001344&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/21aspnet/article/details/7001344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意php新版本此文件名有变更&lt;/p&gt;
&lt;p&gt;#cp php.ini-production /usr/local/php/lib/php.ini&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;修改apache的配置文件httpd.conf&lt;/p&gt;
&lt;p&gt;增加&lt;/p&gt;
&lt;p&gt;AddType application/x-httpd-php .php&lt;/p&gt;
&lt;p&gt;修改www的默认文件地址DocumentRoot&lt;/p&gt;
&lt;p&gt;注意还要修改Directoty的路径和上面的一样&lt;/p&gt;
&lt;p&gt;重启httpd&lt;/p&gt;
&lt;p&gt;测试php文件&lt;/p&gt;
&lt;p&gt;phpinfo()&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; 执行php文件&lt;/p&gt;
&lt;p&gt;#/usr/local/php/bin/php    xx.php&lt;/p&gt;
&lt;p&gt;加速器：&lt;/p&gt;
&lt;p&gt;PHP安装eAccelerator&lt;/p&gt;
&lt;p&gt;PHP安装扩展的两种类型：&lt;/p&gt;
&lt;p&gt;1.PHP安装扩展mcrypt以及相关依赖项 【PHP安装PECL扩展的方法】&lt;br&gt;2.PHP安装与使用VLD查看opcode代码【PHP安装第三方扩展的方法】&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;第四步 Memcached安装&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;可以参考&lt;a href=&quot;http://timke.blog.163.com/blog/static/1015873062009111094715315/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://timke.blog.163.com/blog/static/1015873062009111094715315/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说明必须先安装libevent&lt;/p&gt;
&lt;p&gt;官网   &lt;a href=&quot;http://libevent.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://libevent.org/&lt;/a&gt;  找最新的版本&lt;/p&gt;
&lt;p&gt;#wget &lt;a href=&quot;https://github.com/downloads/libevent/libevent/libevent-2.0.16-stable.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/downloads/libevent/libevent/libevent-2.0.16-stable.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#tar xzvf libevent-2.0.16-stable.tar.gz&lt;/p&gt;
&lt;p&gt;#cd libevent-2.0.16-stable&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二步 安装memcached&lt;/p&gt;
&lt;h1 id=&quot;wget-http-memcached-googlecode-com-files-memcached-1-4-9-tar-gz&quot;&gt;&lt;a href=&quot;#wget-http-memcached-googlecode-com-files-memcached-1-4-9-tar-gz&quot; class=&quot;headerlink&quot; title=&quot;wget http://memcached.googlecode.com/files/memcached-1.4.9.tar.gz&quot;&gt;&lt;/a&gt;wget &lt;a href=&quot;http://memcached.googlecode.com/files/memcached-1.4.9.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://memcached.googlecode.com/files/memcached-1.4.9.tar.gz&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;#tar xzvf memcached-1.4.9.tar.gz&lt;/p&gt;
&lt;p&gt;#cd memcached-1.4.9&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr/local/memcached –with-libevent=/usr&lt;/p&gt;
&lt;p&gt;注意这里选择libevent的位置即可  例如你的是在–with-libevent=/usr/local/libevent/&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install&lt;/p&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;p&gt;#/usr/local/memcached/bin/memcached -d -m 100 -uroot -l 0.0.0.0 -p 11211 -c 512 -P /usr/local/memcached/memcached.pid&lt;/p&gt;
&lt;p&gt;查看详情&lt;/p&gt;
&lt;p&gt;#ps aux|grep mem   &lt;/p&gt;
&lt;p&gt;输出pid&lt;/p&gt;
&lt;p&gt;#cat /usr/local/memcached/memcached.pid&lt;/p&gt;
&lt;p&gt;查看内存使用&lt;/p&gt;
&lt;p&gt;#top -n 1 |grep Mem&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第三步  安装memcached的php扩展memcache&lt;/p&gt;
&lt;p&gt;#wget &lt;a href=&quot;http://pecl.php.net/get/memcache-2.2.6.tgz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pecl.php.net/get/memcache-2.2.6.tgz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#tar vxzf memcache-2.2.6.tgz&lt;/p&gt;
&lt;p&gt;#cd memcache-2.2.6&lt;/p&gt;
&lt;p&gt;#/usr/local/php/bin/phpize&lt;/p&gt;
&lt;p&gt;此处出错可以参考 &lt;a href=&quot;http://blog.csdn.net/21aspnet/article/details/7001182&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/21aspnet/article/details/7001182&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#./configure –enable-memcache –with-php-config=/usr/local/php/bin/php-config –with-zlib-dir&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;#./configure –enable-memcache –with-php-config=/usr/local/php/bin/php-config –with-zlib-dir=/usr&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install &lt;/p&gt;
&lt;p&gt;#vi /usr/local/php/lib/php.ini&lt;/p&gt;
&lt;p&gt;php.ini添加&lt;/p&gt;
&lt;p&gt;extension=memcache.so&lt;/p&gt;
&lt;p&gt;&amp;lt;完&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;重启&lt;/p&gt;
&lt;h1 id=&quot;usr-local-apache2-bin-apachectl-restart-1&quot;&gt;&lt;a href=&quot;#usr-local-apache2-bin-apachectl-restart-1&quot; class=&quot;headerlink&quot; title=&quot;/usr/local/apache2/bin/apachectl restart&quot;&gt;&lt;/a&gt;/usr/local/apache2/bin/apachectl restart&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;测试&lt;br&gt;[php] view plain copy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$memcache = new Memcache; //创建一个memcache对象     
$memcache-&amp;gt;connect(&amp;apos;localhost&amp;apos;, 11211) or die (&amp;quot;Could not connect&amp;quot;); //连接Memcached服务器     
$memcache-&amp;gt;set(&amp;apos;key&amp;apos;, &amp;apos;test&amp;apos;); //设置一个变量到内存中，名称是key 值是test     
$get_value = $memcache-&amp;gt;get(&amp;apos;key&amp;apos;); //从内存中取出key的值     
echo $get_value;    
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;或者手动指定&lt;/p&gt;
&lt;p&gt;extension_dir = “/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/“&lt;br&gt;[php] view plain copy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MemCache {  
    var $mem = null;  

    private static $isLibLoad = false;  
    //put your code here  
    public function Com_MemCache(){  
        if(!self::$isLibLoad){  
            dl(&amp;quot;memcache.so&amp;quot;);  
            self::$isLibLoad = true;  
        }  

        $this-&amp;gt;mem = new Memcache();  
        $this-&amp;gt;mem-&amp;gt;connect(&amp;quot;127.0.0.1&amp;quot;, 11211);  
    }  

    public function set($key,$value,$flag = null,$expire = 5000){  
        $this-&amp;gt;mem-&amp;gt;set($key, $value, $flag, $expire);  
    }  

    public function get($key){  
        return $this-&amp;gt;mem-&amp;gt;get($key);  
    }  

    function __destruct(){  
        $this-&amp;gt;mem-&amp;gt;close();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用&lt;br&gt;[php] view plain copy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cache = new MemCache();  
           $mm = $cache -&amp;gt;get(&amp;quot;A&amp;quot;);  
           if($mm==null){  
             $cache-&amp;gt;set(&amp;apos;A&amp;apos;, date(&amp;apos;Y-m-j&amp;apos;).&amp;apos; &amp;apos;.date(&amp;apos;G:i:s&amp;apos;),null,15);  
           }  
echo $mm;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为MemCache.php有 dl(“memcache.so”);所以在php.ini中不需要extension=memcache.so了，但是前一句extension_dir是要的。&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Nginx安装
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://wiki.nginx.org/Install&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wiki.nginx.org/Install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载&lt;/p&gt;
&lt;p&gt;#wget &lt;a href=&quot;http://nginx.org/download/nginx-1.2.6.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nginx.org/download/nginx-1.2.6.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#./configure –prefix=/usr/local/nginx&lt;/p&gt;
&lt;p&gt;#make&lt;/p&gt;
&lt;p&gt;#make install&lt;/p&gt;
&lt;p&gt;安装Nginx时报错&lt;/p&gt;
&lt;p&gt;./configure: error: the HTTP rewrite module requires the PCRE library.&lt;/p&gt;
&lt;p&gt;安装pcre-devel解决问题&lt;br&gt;yum -y install pcre-devel&lt;/p&gt;
&lt;p&gt;错误提示：./configure: error: the HTTP cache module requires md5 functions&lt;br&gt;from OpenSSL library. You can either disable the module by using&lt;br&gt;–without-http-cache option, or install the OpenSSL library into the system,&lt;br&gt;or build the OpenSSL library statically from the source with nginx by using&lt;br&gt;–with-http_ssl_module –with-openssl=&lt;path&gt;&lt;/path&gt; options.&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;yum -y install openssl openssl-devel&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;yum -y install pcre-devel openssl openssl-devel&lt;/p&gt;
&lt;p&gt;./configure –prefix=/usr/local/nginx&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;make install&lt;/p&gt;
&lt;p&gt;启动nginx&lt;/p&gt;
&lt;p&gt;#/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf&lt;/p&gt;
&lt;p&gt;安装成功的页面&lt;/p&gt;
&lt;p&gt;停止操作&lt;br&gt;停止操作是通过向nginx进程发送信号（什么是信号请参阅linux文 章）来进行的&lt;br&gt;步骤1：查询nginx主进程号&lt;br&gt;ps -ef | grep nginx&lt;br&gt;在进程列表里 面找master进程，它的编号就是主进程号了。&lt;br&gt;步骤2：发送信号&lt;br&gt;从容停止Nginx：&lt;br&gt;kill -QUIT 主进程号&lt;br&gt;快速停止Nginx：&lt;br&gt;kill -TERM 主进程号&lt;br&gt;强制停止Nginx：&lt;br&gt;pkill -9 nginx&lt;/p&gt;
&lt;p&gt;另外， 若在nginx.conf配置了pid文件存放路径则该文件存放的就是Nginx主进程号，如果没指定则放在nginx的logs目录下。有了pid文 件，我们就不用先查询Nginx的主进程号，而直接向Nginx发送信号了，命令如下：&lt;br&gt;kill -信号类型 ‘/usr/nginx/logs/nginx.pid’&lt;/p&gt;
&lt;p&gt;平滑重启&lt;br&gt;如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。&lt;br&gt;平滑重启命令：&lt;br&gt;kill -HUP 住进称号或进程号文件路径&lt;/p&gt;
&lt;p&gt;或者使用&lt;/p&gt;
&lt;p&gt;/usr/nginx/sbin/nginx -s reload&lt;/p&gt;
&lt;p&gt;注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：&lt;br&gt;nginx -t -c /usr/nginx/conf/nginx.conf&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;/usr/nginx/sbin/nginx -t&lt;/p&gt;
&lt;p&gt;平滑升级&lt;br&gt;如果服务器正在运行的Nginx要进行升级、添加或删除模块时，我们需 要停掉服务器并做相应修改，这样服务器就要在一段时间内停止服务，Nginx可以在不停机的情况下进行各种升级动作而不影响服务器运行。&lt;br&gt;步骤1：&lt;br&gt;如 果升级Nginx程序，先用新程序替换旧程序文件，编译安装的话新程序直接编译到Nginx安装目录中。&lt;br&gt;步 骤2：执行命令&lt;br&gt;kill -USR2 旧版程序的主进程号或进程文件名&lt;br&gt;此时旧的Nginx主进程将会把自己的进程文件改名为.oldbin，然后执行新版 Nginx。新旧Nginx会同市运行，共同处理请求。&lt;br&gt;这时要逐步停止旧版 Nginx，输入命令：&lt;br&gt;kill -WINCH 旧版主进程号&lt;br&gt;慢慢旧的工作进程就都会随着任务执行完毕而退出，新版的Nginx的工作进程会逐渐取代旧版 工作进程。&lt;/p&gt;
&lt;p&gt;此 时，我们可以决定使用新版还是恢复到旧版。&lt;br&gt;不重载配置启动新/旧工作进程&lt;br&gt;kill -HUP 旧/新版主进程号&lt;br&gt;从容关闭旧/新进程&lt;br&gt;kill -QUIT 旧/新主进程号&lt;br&gt;如果此时报错，提示还有进程没有结束就用下面命令先关闭旧/新工作进程，再关闭主进程号：&lt;br&gt;kill -TERM 旧/新工作进程号&lt;/p&gt;
&lt;p&gt;这样下来，如果要恢复到旧版本，只需要上面的几个步 骤都是操作新版主进程号，如果要用新版本就上面的几个步骤都操作旧版主进程号就行了。&lt;/p&gt;
&lt;p&gt;上面就是Nginx的一些基本的操作，希望以后Nginx能有更好的方法来处理这些操作， 最好是Nginx的命令而不是向Nginx进程发送系统信号。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;第一步：Apache安装(已更新到2.2.22)&lt;/p&gt;
&lt;p&gt;===================&lt;/p&gt;
&lt;p&gt;下载 去 &lt;a href=&quot;http://www.apache.org&quot; target=&quot;_blank
    
    </summary>
    
    
      <category term="lnmp" scheme="http://xwzmsdqbjzyyg.github.io/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp 单字母函数</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/05/25/thinkphp-01/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/05/25/thinkphp-01/</id>
    <published>2016-05-25T09:00:58.000Z</published>
    <updated>2016-05-25T09:05:47.868Z</updated>
    
    <content type="html">&lt;p&gt;在ThinkPHP中有许多使用简便的单字母函数（即快捷方法），可以很方便开发者快速的调用，但是字母函数却不方便记忆，本文将所有的字母函数总结一下，以方便以后查找。&lt;/p&gt;
&lt;p&gt;1.U() URL组装 支持不同URL模式&lt;br&gt;U($url=’’,$vars=’’,$suffix=true,$domain=false)&lt;/p&gt;
&lt;p&gt;  @param string $url URL表达式，格式：’[模块/控制器/操作#锚点@域名]?参数1=值1&amp;amp;参数2=值2…’&lt;br&gt;  @param string|array $vars 传入的参数，支持数组和字符串&lt;br&gt;  @param string $suffix 伪静态后缀，默认为true表示获取配置值&lt;br&gt;  @param boolean $domain 是否显示域名&lt;br&gt;  @return string&lt;/p&gt;
&lt;p&gt;2.D() D函数用于实例化模型类 格式 [资源://][模块/]模型&lt;br&gt;D($name=’’,$layer=’’)&lt;/p&gt;
&lt;p&gt;  @param string $name 资源地址&lt;br&gt;  @param string $layer 模型层名称&lt;br&gt;  @return Model&lt;/p&gt;
&lt;p&gt;3.M() M函数用于实例化一个没有模型文件的Model&lt;br&gt;M($name=’’,$tablePrefix=’’,$connection=’’)&lt;br&gt;  @param string $name Model名称 支持指定基础模型 例如MongoModel:User&lt;br&gt;  @param string $tablePrefix 表前缀&lt;br&gt;  @param mixed $connection 数据库连接信息&lt;br&gt;  @return Model&lt;/p&gt;
&lt;p&gt;4.I() 获取输入参数 支持过滤和默认值&lt;br&gt;I($name,$default=’’,$filter=null)&lt;br&gt;  使用方法:&lt;/p&gt;
&lt;p&gt;I(‘id’,0); //获取id参数 自动判断get或者post&lt;br&gt;I(‘post.name’,’’,’htmlspecialchars’); //获取$_POST[‘name’]&lt;br&gt;I(‘get.’); //获取$_GET&lt;/p&gt;
&lt;p&gt;5.B() 执行某个行为&lt;br&gt;B($name,$tag=’’,&amp;amp;$params=NULL)&lt;br&gt;  @param string $name 行为名称&lt;br&gt;  @param string $tag 标签名称（行为类无需传入）&lt;br&gt;  @param Mixed $params 传入的参数&lt;br&gt;  @return void&lt;/p&gt;
&lt;p&gt;6.C() 读取及设置配置参数&lt;br&gt;C($name=null,$value=null,$default=null)&lt;/p&gt;
&lt;p&gt;  @param string|array $name 配置变量&lt;br&gt;  @param mixed $value 配置值&lt;br&gt;  @param mixed $default 默认值&lt;br&gt;  @return mixed&lt;/p&gt;
&lt;p&gt;7.E() 抛出异常处理&lt;br&gt;E($msg, $code=0)&lt;/p&gt;
&lt;p&gt;  @param string $msg 异常消息&lt;br&gt;  @param integer $code 异常代码 默认为0&lt;br&gt;  @return void&lt;/p&gt;
&lt;p&gt;8.G() 记录和统计时间（微秒）和内存使用情况&lt;br&gt;G($start,$end=’’,$dec=4)&lt;/p&gt;
&lt;p&gt;  使用方法:&lt;br&gt;G(‘begin’); // 记录开始标记位&lt;br&gt;// … 区间运行代码&lt;br&gt;G(‘end’); // 记录结束标签位&lt;br&gt;echo G(‘begin’,’end’,6); //统计区间运行时间 精确到小数后6位&lt;br&gt;echo G(‘begin’,’end’,’m’); // 统计区间内存使用情况&lt;/p&gt;
&lt;p&gt;  如果end标记位没有定义，则会自动以当前作为标记位&lt;br&gt;  其中统计内存使用需要 MEMORY_LIMIT_ON 常量为true才有效&lt;br&gt;  @param string $start 开始标签&lt;br&gt;  @param string $end 结束标签&lt;br&gt;  @param integer|string $dec 小数位或者m&lt;br&gt;  @return mixed&lt;/p&gt;
&lt;p&gt;9.L()获取和设置语言定义(不区分大小写)&lt;br&gt;L($name=null,$value=null)&lt;/p&gt;
&lt;p&gt;  @param string|array $name 语言变量&lt;br&gt;  @param mixed $value 语言值或者变量&lt;br&gt;  @return mixed&lt;/p&gt;
&lt;p&gt;10.T()获取模版文件 格式 资源://模块@主题/控制器/操作&lt;br&gt;T($template=’’,$layer=’’)&lt;/p&gt;
&lt;p&gt;  @param string $name 模版资源地址&lt;br&gt;  @param string $layer 视图层（目录）名称&lt;br&gt;  @return string&lt;/p&gt;
&lt;p&gt;11.N() 设置和获取统计数据&lt;br&gt;N($key,$step=0,$save=false)&lt;/p&gt;
&lt;p&gt;  使用方法:&lt;br&gt;N(‘db’,1); // 记录数据库操作次数&lt;br&gt;N(‘read’,1); // 记录读取次数&lt;br&gt;echo N(‘db’); // 获取当前页面数据库的所有操作次数&lt;br&gt;echo N(‘read’); // 获取当前页面读取次数&lt;/p&gt;
&lt;p&gt;  @param string $key 标识位置&lt;br&gt;  @param integer $step 步进值&lt;br&gt;  @return mixed&lt;/p&gt;
&lt;p&gt;12.A()A函数用于实例化控制器&lt;/p&gt;
&lt;p&gt;格式：[资源://][模块/]控制器&lt;br&gt;A($name,$layer=’’,$level=’’)&lt;/p&gt;
&lt;p&gt;  @param string $name 资源地址&lt;br&gt;  @param string $layer 控制层名称&lt;br&gt;  @param integer $level 控制器层次&lt;br&gt;  @return Controller|false&lt;/p&gt;
&lt;p&gt;13.R() 远程调用控制器的操作方法&lt;/p&gt;
&lt;p&gt;URL 参数格式 [资源://][模块/]控制器/操作&lt;br&gt;R($url,$vars=array(),$layer=’’)&lt;/p&gt;
&lt;p&gt;  @param string $url 调用地址&lt;br&gt;  @param string|array $vars 调用参数 支持字符串和数组&lt;br&gt;  @param string $layer 要调用的控制层名称&lt;br&gt;  @return mixed&lt;/p&gt;
&lt;p&gt;14.W()渲染输出Widget&lt;br&gt;W($name,$data=array())&lt;/p&gt;
&lt;p&gt;  @param string $name Widget名称&lt;br&gt;  @param array $data 传入的参数&lt;br&gt;  @return void&lt;/p&gt;
&lt;p&gt;15.S()缓存管理&lt;br&gt;S($name,$value=’’,$options=null)&lt;/p&gt;
&lt;p&gt;  @param mixed $name 缓存名称，如果为数组表示进行缓存设置&lt;br&gt;  @param mixed $value 缓存值&lt;br&gt;  @param mixed $options 缓存参数&lt;br&gt;  @return mixed&lt;/p&gt;
&lt;p&gt;16.F() 快速文件数据读取和保存 针对简单类型数据 字符串、数组&lt;br&gt;F($name, $value=’’,$path=DATA_PATH)&lt;/p&gt;
&lt;p&gt;  @param string $name 缓存名称&lt;br&gt;  @param mixed $value 缓存值&lt;br&gt;  @param string $path 缓存路径&lt;br&gt;  @return mixed&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在ThinkPHP中有许多使用简便的单字母函数（即快捷方法），可以很方便开发者快速的调用，但是字母函数却不方便记忆，本文将所有的字母函数总结一下，以方便以后查找。&lt;/p&gt;
&lt;p&gt;1.U() URL组装 支持不同URL模式&lt;br&gt;U($url=’’,$vars=’’,$suf
    
    </summary>
    
    
      <category term="thinkphp" scheme="http://xwzmsdqbjzyyg.github.io/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>摘抄自知乎的redis相关</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/05/24/redis-01/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/05/24/redis-01/</id>
    <published>2016-05-24T03:10:00.000Z</published>
    <updated>2016-05-24T03:32:44.122Z</updated>
    
    <content type="html">&lt;p&gt;  1.知乎日报的基础数据和统计信息是用 Redis 存储的，这使得请求的平均响应时间能在 10ms 以下。&lt;br&gt;其他数据仍然需要存放在另外的地方，其实完全用 Redis 也是可行的，主要的考量是内存占用。&lt;br&gt;就使用经验而言，Redis 的数据结构很丰富，精心设计地话，能满足很多应用场景。至少很多时候比 MySQL 更方便&lt;br&gt;2.单独使用Redis的话，它是成当不起数据库的任务，比如你每日活跃用户是1万人，但是你那台redis里面已经积累了50万人了（这个比例很正常），那么每次redis启动，就需要把50万load内存，每次redis备份，又需要把50万dump到磁盘，这靠谱么？&lt;br&gt;把冷数据落地到mongo，热数据在用redis存储。 &lt;/p&gt;
&lt;p&gt;3.redis是目前公认的速度最快的基于内存的键值对数据库，但redis的缺点也非常明显，仅提供最基本的hash set, list, sorted set等基于数据类型，不分表，没有schema，没有索引，没有外键，缺少int/date等基本数据类型，多条件查询需要通过集合内联(sinter,zinterstore)和连接间接实现，操作不便，开发效率低，可维护性不佳； 因此一般不将其视为完整的数据库单独使用，很多网站将redis作为高速缓存和session状态存储层，然后再与其他数据库搭配使用。&lt;/p&gt;
&lt;p&gt;4.核心业务建议数据还是落地到mysql，redis在异常情况下回丢数据。&lt;br&gt;非核心业务，比如运营推广，数据聚合统计这种允许数据少量丢失的业务可以全用mysql，扩展方便，效率高，业务量也不大。特别是运营推广这种时效性很强的业务，在推广结束后数据接没用了，Redis内存压力也不会很大。&lt;br&gt;mysql能支持对各个字段的查询，Redis的查询仅限于对key的简单匹配，如果要对value进行复杂查询，不适合用Redis。&lt;/p&gt;
&lt;p&gt;5.目前redis做数据库还不太靠谱。它支持的数据类型太少，而且查询功能太弱。redis并不是为了作为数据库使用的，它更多地是一个高速存取器，一般用作缓存和类似场景。&lt;/p&gt;
&lt;p&gt;6.redis是一种k/v的内存数据库，适合小数据量的存储以及实时要求高的地方，但是不适合做完整数据库，完整数据库基本上都有一套详细解决方案，比如mysql。&lt;br&gt;我们项目里用到的redis是用来做缓存的，设置过期时间，到时就自动清掉。数据库还是用mysql等这种成熟的方案。&lt;br&gt;如果你非要用一种nosql来做数据库，推荐你用Mongodb&lt;/p&gt;
&lt;p&gt; 7.redis能否做数据库用取决于如下几个条件：&lt;br&gt;1：数据量，毕竟内存数据库，还是受限于内存的容量，虽然可以redis可以持久化。&lt;br&gt;2：数据的结构，是否能够将关系型数据结构都转换为key/value的形式。&lt;br&gt;3：查询的效率，对范围查询等，是否能转换为高效的hash索引查询&lt;/p&gt;
&lt;p&gt;8.MongoDB不是内存型数据库，他只不过把所有文件索引存到内存里而已。同样的机型，用MongoDB会比Redis存更多，但Redis响应更快。关键的是看量有多大。&lt;/p&gt;
&lt;p&gt;9.MongoDB是nosql数据库，它支持把一部分热数据放到内存中，方便用户更快的去处理它。&lt;/p&gt;
&lt;p&gt;Redis是内存型数据库，是完全的内存数据库！所有的数据都在内存，不存在硬盘一部分，内存一部分的情况。当然可以用save去存数据到硬盘，但这是为了备份安全性考虑而不是使用。&lt;/p&gt;
&lt;p&gt; 10.一个哈希实际上是一组键值对的集合，哈希本身的键是“父键”，哈希中包含的若干字段是“子键”，每个“子键”都有相应的值。“子键”之间并没有一定的联系，但是它们共同组成了一个完整的哈希结构。我们可以把一个哈希看做关系数据库中的一行，哈希的每个子键对应行的一个字段。因此，当把关系数据库中的数据缓存至Redis时，使用哈希结构可能会带来方便。需要注意的是，哈希结构内部的子键之间是没有顺序关系的。&lt;/p&gt;
&lt;p&gt;11.Redis是一种内存数据库，这使其在数据存取效率方面表现突出。由于内存中的数据时刻面临丢失的危险，Redis提供了两种持久化机制，及时将内存中的数据写入硬盘。第一种机制为RDB，利用存储快照的方式把内存数据定期写入硬盘；第二种机制为AOF，利用写日志的方式，每执行一条更改Redis数据的命令，就在日志里附加上该命令并保存在硬盘上。Redis默认开启RDB模式，关闭AOF模式，这是因为AOF更加耗时。但是，如果对数据安全要求极高，无法承担任何数据丢失的后果，AOF模式就变成了持久化的首选。&lt;br&gt; 当然，即使Redis具备持久化机制，但是一旦本地硬盘损坏，数据丢失依然在所难免。所以，Redis又提供了复制功能，作用是将一个主数据库（master）的数据自动同步到多个从数据库（slave），从而尽可能防止数据丢失。Redis主从机制可以简单描述为：从数据库启动后，先向主数据库发送SYNC命令；主数据库接到SYNC命令后就开始保存快照，在此期间，所有发给主数据库的命令都被缓存起来；快照保存完成后，主数据库把快照和缓存的命令一起发给从数据库；从数据库保存主数据库发来的快照文件，并依次执行主数据库发来的缓存命令。在同步过程中，从数据库不会阻塞，它默认使用同步之前的数据继续响应客户端发来的命令。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;  1.知乎日报的基础数据和统计信息是用 Redis 存储的，这使得请求的平均响应时间能在 10ms 以下。&lt;br&gt;其他数据仍然需要存放在另外的地方，其实完全用 Redis 也是可行的，主要的考量是内存占用。&lt;br&gt;就使用经验而言，Redis 的数据结构很丰富，精心设计地话
    
    </summary>
    
    
      <category term="redis" scheme="http://xwzmsdqbjzyyg.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xwzmsdqbjzyyg.github.io/2016/05/19/hello-world/"/>
    <id>http://xwzmsdqbjzyyg.github.io/2016/05/19/hello-world/</id>
    <published>2016-05-19T06:45:26.685Z</published>
    <updated>2016-05-30T08:51:00.117Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
